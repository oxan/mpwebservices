<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TvLibrary.Interfaces</name>
    </assembly>
    <members>
        <member name="T:TvLibrary.TvExceptionNoSignal">
            <summary>
            Exception class for the tv library
            </summary>
        </member>
        <member name="M:TvLibrary.TvExceptionNoSignal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.TvExceptionNoSignal.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TvLibrary.TvExceptionNoSignal.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:TvLibrary.TvExceptionGraphBuildingFailed">
            <summary>
            Exception class for the tv library
            </summary>
        </member>
        <member name="M:TvLibrary.TvExceptionGraphBuildingFailed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.TvExceptionGraphBuildingFailed.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TvLibrary.TvExceptionGraphBuildingFailed.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:TvLibrary.TvExceptionSWEncoderMissing">
            <summary>
            Exception class for the tv library
            </summary>
        </member>
        <member name="M:TvLibrary.TvExceptionSWEncoderMissing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.TvExceptionSWEncoderMissing.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TvLibrary.TvExceptionSWEncoderMissing.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:TvLibrary.TvException">
            <summary>
            Exception class for the tv library
            </summary>
        </member>
        <member name="M:TvLibrary.TvException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.TvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TvLibrary.TvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.TvException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:TvLibrary.Interfaces.CamType">
            <summary>
            cam types
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CamType.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CamType.Astoncrypt2">
            <summary>
            Astoncrypt 2 cam
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.ITVCard">
            <summary>
            interface for a tv card
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.CanTune(TvLibrary.Interfaces.IChannel)">
            <summary>
            Method to check if card can tune to the channel specified
            </summary>
            <returns>true if card can tune to the channel otherwise false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.StopGraph">
            <summary>
            Stops the current graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.StartLinkageScanner(TvLibrary.Interfaces.BaseChannelLinkageScanner)">
            <summary>
            Starts scanning for linkage info
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.ResetLinkageScanner">
            <summary>
            Stops/Resets the linkage scanner
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.GrabEpg(TvLibrary.Interfaces.BaseEpgGrabber)">
            <summary>
            Grabs the epg.
            </summary>
            <param name="callback">The callback which gets called when epg is received or canceled.</param>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.GrabEpg">
            <summary>
            Start grabbing the epg while timeshifting
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.AbortGrabbing">
            <summary>
            Aborts grabbing the epg. This also triggers the OnEpgReceived callback.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.Tune(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            Tunes the specified channel.
            </summary>
            <param name="subChannelId">The sub channel id.</param>
            <param name="channel">The channel.</param>
            <returns>true if succeeded else false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.ReloadCardConfiguration">
            <summary>
            Reloads the card configuration
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.ResetSignalUpdate">
            <summary>
            Updates the signal state for a card.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.GetSubChannel(System.Int32)">
            <summary>
            Gets the sub channel.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.FreeSubChannelContinueGraph(System.Int32)">
            <summary>
            Frees the sub channel.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.FreeSubChannelContinueGraph(System.Int32,System.Boolean)">
            <summary>
            Frees the sub channel.
            </summary>
            <param name="id">The id.</param>
            <param name="subchannelBusy">is the subcannel busy with other users.</param>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVCard.FreeSubChannel(System.Int32)">
            <summary>
            Frees the sub channel.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.SupportsSubChannels">
            <summary>
            Gets a value indicating whether card supports subchannels
            </summary>
            <value><c>true</c> if card supports sub channels; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.Parameters">
            <summary>
            Gets or sets the timeout parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.Name">
            <summary>
            Gets/sets the card name
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.CardPresent">
            <summary>
            Gets/Sets that the card is present
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.DevicePath">
            <summary>
            Gets/sets the card device
            </summary>		
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.MinChannel">
            <summary>
            returns the min. channel number for analog cards
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.MaxChannel">
            <summary>
            returns the max. channel number for analog cards
            </summary>
            <value>The max channel.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.CamType">
            <summary>
            Gets or sets the type of the cam.
            </summary>
            <value>The type of the cam.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.CardType">
            <summary>
            Gets/sets the card type
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.DiSEqCMotor">
            <summary>
            Gets the interface for controlling the diseqc motor
            </summary>
            <value>Theinterface for controlling the diseqc motor.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.NumberOfChannelsDecrypting">
            <summary>
            Gets the number of channels the card is currently decrypting.
            </summary>
            <value>The number of channels decrypting.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.HasCA">
            <summary>
            Does the card have a CA module.
            </summary>
            <value>The number of channels decrypting.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.ChannelLinkages">
            <summary>
            Returns the channel linkages grabbed
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.Epg">
            <summary>
            returns a list of all epg data for each channel found.
            </summary>
            <value>The epg.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.ScanningInterface">
            <summary>
            returns the ITVScanning interface used for scanning channels
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.Quality">
            <summary>
            Get/Set the quality
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.SupportsQualityControl">
            <summary>
            Property which returns true if card supports quality control
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.IsHybrid">
            <summary>
            Returns if the tuner belongs to a hybrid card
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.IsTunerLocked">
            <summary>
            When the tuner is locked onto a signal this property will return true
            otherwise false
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.SignalQuality">
            <summary>
            returns the signal quality
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.SignalLevel">
            <summary>
            returns the signal level
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.IsEpgGrabbing">
            <summary>
            Gets or sets a value indicating whether this card is epg grabbing.
            </summary>
            <value>
            	<c>true</c> if this instance is epg grabbing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.IsScanning">
            <summary>
            Gets or sets a value indicating whether this card is scanning for channels.
            </summary>
            <value>
            	<c>true</c> if this card is scanning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVCard.SubChannels">
            <summary>
            Gets the sub channels.
            </summary>
            <value>The sub channels.</value>
        </member>
        <member name="T:TvLibrary.Interfaces.ICiMenuActions">
            <summary>
            Interface for CI menu actions;
            Each DVB card has to support these for CI menu access
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuActions.SetCiMenuHandler(TvLibrary.Interfaces.ICiMenuCallbacks)">
            <summary>
            Set CI menu callback handler
            </summary>
            <param name="ciMenuHandler">callback handler</param>
            <returns>true</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuActions.EnterCIMenu">
            <summary>
            Enter CI menu
            </summary>
            <returns>true is successful</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuActions.CloseCIMenu">
            <summary>
            Closes CI menu
            </summary>
            <returns>true is successful</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuActions.SelectMenu(System.Byte)">
            <summary>
            Selects a menu choice
            </summary>
            <param name="choice">choice (0 means back)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuActions.SendMenuAnswer(System.Boolean,System.String)">
            <summary>
            Send a menu answer after CAM inquiry
            </summary>
            <param name="Cancel">true to cancel</param>
            <param name="Answer">answer string</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:TvLibrary.Interfaces.TvConstants">
            <summary>
            Class for definition of globally used constants
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.TvConstants.TvGroupNames">
            <summary>
            all constant Tv channel group names
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.TvGroupNames.AllChannels">
            <summary>
            Name of group where all (new) channels are stored
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.TvGroupNames.Analog">
            <summary>
            Name of group where all analog channels are stored
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.TvGroupNames.DVBT">
            <summary>
            Name of group where all DVB-T channels are stored
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.TvGroupNames.DVBC">
            <summary>
            Name of group where all DVB-C channels are stored
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.TvConstants.RadioGroupNames">
            <summary>
            all constant Radio channel group names
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.RadioGroupNames.AllChannels">
            <summary>
            Name of group where all (new) channels are stored
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.RadioGroupNames.Analog">
            <summary>
            Name of group where all analog channels are stored
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.RadioGroupNames.DVBT">
            <summary>
            Name of group where all DVB-T channels are stored
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.TvConstants.RadioGroupNames.DVBC">
            <summary>
            Name of group where all DVB-C channels are stored
            </summary>
        </member>
        <member name="T:mathSimmetrics.MathFuncs">
            <summary>
            Math helper functions
            </summary>
        </member>
        <member name="M:mathSimmetrics.MathFuncs.max3(System.Single,System.Single,System.Single)">
            <summary>
            Returns the maximum of three values
            </summary>
            <param name="x">First value</param>
            <param name="y">Second value</param>
            <param name="z">Third value</param>
            <returns>Maximum of the given three values</returns>
        </member>
        <member name="M:mathSimmetrics.MathFuncs.max4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            REturns the maximum of four values
            </summary>
            <param name="w">First value</param>
            <param name="x">Second value</param>
            <param name="y">Third value</param>
            <param name="z">Fourth value</param>
            <returns>Maximum of the given fourvalues</returns>
        </member>
        <member name="M:mathSimmetrics.MathFuncs.min3(System.Single,System.Single,System.Single)">
            <summary>
            Returns the minimum of three values
            </summary>
            <param name="x">First value</param>
            <param name="y">Second value</param>
            <param name="z">Third value</param>
            <returns>Minimum of the given three values</returns>
        </member>
        <member name="M:mathSimmetrics.MathFuncs.min3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the minimum of three values
            </summary>
            <param name="x">First value</param>
            <param name="y">Second value</param>
            <param name="z">Third value</param>
            <returns>Minimum of the given three values</returns>
        </member>
        <member name="M:mathSimmetrics.MathFuncs.max3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the maximum of three values
            </summary>
            <param name="x">First value</param>
            <param name="y">Second value</param>
            <param name="z">Third value</param>
            <returns>Maximum of the given three values</returns>
        </member>
        <member name="T:api.InterfaceStringMetric">
            <summary>
            String metric interface
            </summary>
        </member>
        <member name="M:api.InterfaceStringMetric.getSimilarityTimingActual(System.String,System.String)">
            <summary>
            Return Similarity Timing Actual
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>Similarity Timing</returns>
        </member>
        <member name="M:api.InterfaceStringMetric.getSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            Return the similarty timing estimation
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>similarty timing estimation</returns>
        </member>
        <member name="M:api.InterfaceStringMetric.getSimilarity(System.String,System.String)">
            <summary>
            Return the similarity
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>Similarity</returns>
        </member>
        <member name="P:api.InterfaceStringMetric.ShortDescriptionString">
            <summary>
            Gets the short description
            </summary>
        </member>
        <member name="P:api.InterfaceStringMetric.LongDescriptionString">
            <summary>
            Gets the long description
            </summary>
        </member>
        <member name="T:TvLibrary.Epg.EpgProgram">
            <summary>
            Class which contains a single epg-program
            </summary>
        </member>
        <member name="M:TvLibrary.Epg.EpgProgram.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Epg.EpgProgram"/> class.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
        </member>
        <member name="M:TvLibrary.Epg.EpgProgram.CompareTo(TvLibrary.Epg.EpgProgram)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:TvLibrary.Epg.EpgProgram.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgProgram.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgProgram.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="T:TvLibrary.Implementations.AnalogChannel">
            <summary>
            class holding all tuning details for analog channels
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.IChannel">
            <summary>
            interface which describes a tv/radio channel
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Interfaces.IChannel.Name">
            <summary>
            gets/sets the channel name
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IChannel.IsRadio">
            <summary>
            boolean indication if this is a radio channel
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IChannel.IsTv">
            <summary>
            boolean indication if this is a tv channel
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.AnalogChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Implementations.AnalogChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.AnalogChannel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.AnalogChannel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.AnalogChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.AnalogChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.VideoSource">
            <summary>
            Gets or sets the video source.
            </summary>
            <value>The video source.</value>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.AudioSource">
            <summary>
            Gets or sets the audio source.
            </summary>
            <value>The audio source.</value>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.TunerSource">
            <summary>
            Gets or sets the tuner source.
            </summary>
            <value>The tuner source.</value>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.Country">
            <summary>
            gets/sets the country
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.Name">
            <summary>
            gets/sets the channel name
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.Frequency">
            <summary>
            gets/sets the frequency
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.ChannelNumber">
            <summary>
            gets/sets the channel number
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.IsRadio">
            <summary>
            boolean indicating if this is a radio channel
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.IsTv">
            <summary>
            boolean indicating if this is a tv channel
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.AnalogChannel.IsVCRSignal">
            <summary>
            boolean indicating if this is channel provides a vcr signal
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.AnalogChannel.VideoInputType">
            <summary>
            Video input type
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.Tuner">
            <summary>
            Tuner input
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.VideoInput1">
            <summary>
            CVBS input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.VideoInput2">
            <summary>
            CVBS input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.VideoInput3">
            <summary>
            CVBS input #3
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.SvhsInput1">
            <summary>
            SVHS input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.SvhsInput2">
            <summary>
            SVHS input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.SvhsInput3">
            <summary>
            SVHS input #3
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.RgbInput1">
            <summary>
            RGB input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.RgbInput2">
            <summary>
            RGB input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.RgbInput3">
            <summary>
            RGB input #3
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.YRYBYInput1">
            <summary>
            RGB input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.YRYBYInput2">
            <summary>
            RGB input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.VideoInputType.YRYBYInput3">
            <summary>
            RGB input #3
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.AnalogChannel.AudioInputType">
            <summary>
            Audio input type
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.Automatic">
            <summary>
            Automatic detection based on related pin index
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.Tuner">
            <summary>
            Tuner input
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.AUXInput1">
            <summary>
            AUX input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.AUXInput2">
            <summary>
            AUX input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.AUXInput3">
            <summary>
            AUX input #3
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.LineInput1">
            <summary>
            Line input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.LineInput2">
            <summary>
            Line input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.LineInput3">
            <summary>
            Line input #3
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.SPDIFInput1">
            <summary>
            SPDIF input #1
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.SPDIFInput2">
            <summary>
            SPDIF input #2
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.AnalogChannel.AudioInputType.SPDIFInput3">
            <summary>
            SPDIF input #3
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.CiMenuCallback">
            <summary>
            Delegate defines the method call from the server to the client
            </summary>
            <param name="Menu">Pass a CiMenu object</param>
        </member>
        <member name="T:TvLibrary.Interfaces.CiMenuCallbackSink">
            <summary>
            This class is used by client to provide delegates to the server that will
            fire events back through these delegates. Overriding OnServerEvent to capture
            the callback from the server
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenuCallbackSink.FireCiMenuCallback(TvLibrary.Interfaces.CiMenu)">
            <summary>
            Called by the server to fire the call back to the client
            </summary>
            <param name="Menu">a CiMenu object</param>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenuCallbackSink.CiMenuCallback(TvLibrary.Interfaces.CiMenu)">
            <summary>
            Client overrides this method to receive the callback events from the server
            </summary>
            <param name="Menu">a CiMenu object</param>
        </member>
        <member name="T:TvLibrary.Interfaces.CiMenuEntry">
            <summary>
            CiMenuEntry class to store a single entry
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenuEntry.#ctor(System.Int32,System.String)">
            <summary>
            CTOR
            </summary>
            <param name="Index">Index of entry</param>
            <param name="Message">Message</param>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenuEntry.ToString">
            <summary>
            Formatted choice text
            </summary>
            <returns></returns>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenuEntry.Index">
            <summary>
            Index of menu entry
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenuEntry.Message">
            <summary>
            Message of menu entry
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.CiMenu">
            <summary>
            CiMenu class contains all information of a menu
            derived from MarshalByRefObject for passing through remoting
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenu.#ctor(System.String,System.String,System.String,TvLibrary.Interfaces.CiMenuState)">
            <summary>
            CTOR
            </summary>
            <param name="Title">Title</param>
            <param name="Subtitle">Subtitle</param>
            <param name="BottomText">Bottomtext</param>
            <param name="State">Menu state</param>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenu.AddEntry(System.Int32,System.String)">
            <summary>
            Add an entry to ci menu object
            </summary>
            <param name="Index">index</param>
            <param name="Message">message</param>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenu.Request(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets information from a CAM request 
            </summary>
            <param name="sRequest">Request messages</param>
            <param name="nAnswerLength">Expected max. answer length</param>
            <param name="bPassword">Show as password input</param>
        </member>
        <member name="M:TvLibrary.Interfaces.CiMenu.InitializeLifetimeService">
            <summary>
            override to avoid timeout ?
            </summary>
            <returns></returns>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.Title">
            <summary>
            Title of menu
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.Subtitle">
            <summary>
            Subtitle of menu
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.BottomText">
            <summary>
            Bottom text
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.NumChoices">
            <summary>
            Number of choices
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.State">
            <summary>
            Menu state
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.MenuEntries">
            <summary>
            Menu entries
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.RequestText">
            <summary>
            RequestText 
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.AnswerLength">
            <summary>
            AnswerLength 
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.CiMenu.Password">
            <summary>
            Request input as password?
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.CiMenuState">
            <summary>
            State of ci menu
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CiMenuState.Closed">
            menu is closed
        </member>
        <member name="F:TvLibrary.Interfaces.CiMenuState.Opened">
            opened
        </member>
        <member name="F:TvLibrary.Interfaces.CiMenuState.Ready">
            ready
        </member>
        <member name="F:TvLibrary.Interfaces.CiMenuState.Request">
            request
        </member>
        <member name="F:TvLibrary.Interfaces.CiMenuState.NoChoices">
            no choices
        </member>
        <member name="F:TvLibrary.Interfaces.CiMenuState.Error">
            error
        </member>
        <member name="T:TvLibrary.Interfaces.ICiMenuCallbacks">
            <summary>
            Interface for all DVB cards to support CI menu
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuCallbacks.OnCiMenu(System.String,System.String,System.String,System.Int32)">
            <summary>
            Callback on opening menu
            </summary>
            <param name="lpszTitle">Title</param>
            <param name="lpszSubTitle">Subtitle</param>
            <param name="lpszBottom">Bottom text</param>
            <param name="nNumChoices">number of choices</param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuCallbacks.OnCiMenuChoice(System.Int32,System.String)">
            <summary>
            Callback for each menu entry
            </summary>
            <param name="nChoice">choice number</param>
            <param name="lpszText">choice text</param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuCallbacks.OnCiCloseDisplay(System.Int32)">
            <summary>
            Callback on closing display
            </summary>
            <param name="nDelay">delay in seconds</param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ICiMenuCallbacks.OnCiRequest(System.Boolean,System.UInt32,System.String)">
            <summary>
            Callback on requesting user input (PIN,...)
            </summary>
            <param name="bBlind">true if password</param>
            <param name="nAnswerLength">expected (max) answer length</param>
            <param name="lpszText">request text</param>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.Crossbar">
            <summary>
            Bean class for a Crossbar in the analog graph
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Crossbar._name">
            <summary>
            Name of the crossbar device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Crossbar._videoOut">
            <summary>
            Index of the video output pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Crossbar._audioOut">
            <summary>
            Index of the audio output pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Crossbar._videoPinMap">
            <summary>
            Mapping of the available video sources and their pin index
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Crossbar._videoPinRelatedAudioMap">
            <summary>
            Mapping of the available video source to the related audio pin index
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Crossbar._audioPinMap">
            <summary>
            Mapping of the available audio source and their pin index
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates the instance by parsing the Crossbar node in the configuration file
            </summary>
            <param name="xmlNode">The TvAudio xml node</param>
            <returns>TvAudio instance</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.WriteGraph(System.Xml.XmlWriter)">
            <summary>
            Writes the Crossbar part of the graph to the configuration
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.Name">
            <summary>
            Name of the tuner device
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.VideoOut">
            <summary>
            Index of the input pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.AudioOut">
            <summary>
            Index of the audio pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.VideoPinMap">
            <summary>
            Map of the available video input pins
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.VideoPinRelatedAudioMap">
            <summary>
            Map of the related audio pins for the available video input pins
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Crossbar.AudioPinMap">
            <summary>
            Map of the available audio input pins
            </summary>
        </member>
        <member name="T:TvLibrary.Epg.EpgChannel">
            <summary>
            class which holds all epg information received for a specific DVB tv/radio channel
            </summary>
        </member>
        <member name="M:TvLibrary.Epg.EpgChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Epg.EpgChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Epg.EpgChannel.Sort">
            <summary>
            Sorts all programs for this channel on time/date.
            </summary>
        </member>
        <member name="P:TvLibrary.Epg.EpgChannel.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgChannel.Programs">
            <summary>
            Gets or sets the epg programs.
            </summary>
            <value>The programs.</value>
        </member>
        <member name="T:TvLibrary.Channels.DVBCTuning">
            <summary>
            Tuning part of DVB-C required for scanning
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBCTuning.#ctor(System.Int64,DirectShowLib.BDA.ModulationType,System.Int32)">
            <summary>
            CTOR
            </summary>
            <param name="p_Frequency">Frequency</param>
            <param name="p_ModulationType">ModulationType</param>
            <param name="p_SymbolRate">SymbolRate</param>
        </member>
        <member name="F:TvLibrary.Channels.DVBCTuning.Frequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DVBCTuning.ModulationType">
            <summary>
            ModulationType
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DVBCTuning.SymbolRate">
            <summary>
            SymbolRate
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBCTuning.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Channels.DVBCChannel">
            <summary>
            class holding all tuning details for DVBC
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.DVBBaseChannel">
            <summary>
            base class for DVB channels
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBBaseChannel.#ctor(TvLibrary.Channels.DVBBaseChannel)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBBaseChannel.#ctor">
            <summary>
             Base constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBBaseChannel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBBaseChannel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBBaseChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBBaseChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.LogicalChannelNumber">
            <summary>
            gets/set the LCN of the channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.PcrPid">
            <summary>
            Gets or sets the PCR pid.
            </summary>
            <value>The PCR pid.</value>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.PmtPid">
            <summary>
            gets/set the pid of the Program management table for the channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.NetworkId">
            <summary>
            gets/sets the network id of the channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.ServiceId">
            <summary>
            gets/sets the service id of the channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.TransportId">
            <summary>
            gets/sets the transport id of the channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.Name">
            <summary>
            gets/sets the channel name
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.Provider">
            <summary>
            gets/sets the channel provider name
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.Frequency">
            <summary>
            gets/sets the carrier frequency of the channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.IsRadio">
            <summary>
            boolean indication if this is a radio channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.IsTv">
            <summary>
            boolean indication if this is a tv channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.FreeToAir">
            <summary>
            boolean indicating if this is a FreeToAir channel or an encrypted channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.AudioPid">
            <summary>
            gets/sets the AudioPid
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBBaseChannel.VideoPid">
            <summary>
            gets/sets the VideoPid
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBCChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.DVBCChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBCChannel.#ctor(TvLibrary.Channels.DVBCTuning)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.DVBCChannel"/> class.
            </summary>
            <param name="tuning">Tuning detail</param>
        </member>
        <member name="M:TvLibrary.Channels.DVBCChannel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBCChannel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBCChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBCChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Channels.DVBCChannel.TuningInfo">
            <summary>
            returns basic tuning info for current channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBCChannel.SymbolRate">
            <summary>
            gets/sets the symbolrate for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBCChannel.ModulationType">
            <summary>
            gets/sets the ModulationType for this channel
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.ATSCChannel">
            <summary>
            class holding all tuning details for ATSC
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.ATSCChannel.#ctor(TvLibrary.Channels.ATSCChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.ATSCChannel"/> class.
            </summary>
            <param name="chan">The chan.</param>
        </member>
        <member name="M:TvLibrary.Channels.ATSCChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.ATSCChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.ATSCChannel.ToString">
            <summary>
            Toes the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Channels.ATSCChannel.Equals(System.Object)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Channels.ATSCChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.ATSCChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Channels.ATSCChannel.ModulationType">
            <summary>
            gets/sets the modulation type
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.ATSCChannel.PhysicalChannel">
            <summary>
            gets/sets the physical channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.ATSCChannel.MajorChannel">
            <summary>
            gets/sets the major channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.ATSCChannel.MinorChannel">
            <summary>
            gets/sets the minor channel
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.DvbTextConverter">
            <summary>
            DVB text strings to Unicode converter
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.DvbTextConverter.Convert(System.IntPtr,System.String)">
            <summary>
            Convert DVB string to Unicode according to provided language
            </summary>
        </member>
        <member name="T:api.AbstractSubstitutionCost">
            <summary>
            Abstract SubstitutionCost
            </summary>
        </member>
        <member name="T:api.InterfaceSubstitutionCost">
            <summary>
            Interface for substitution cost
            </summary>
        </member>
        <member name="M:api.InterfaceSubstitutionCost.getShortDescriptionString">
            <summary>
            Gets the short description
            </summary>
            <returns>Short description</returns>
        </member>
        <member name="M:api.InterfaceSubstitutionCost.getCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Returns the cost
            </summary>
            <param name="s">Param1</param>
            <param name="i">Param2</param>
            <param name="s1">Param3</param>
            <param name="j">Param4</param>
            <returns>Cost</returns>
        </member>
        <member name="M:api.InterfaceSubstitutionCost.getMaxCost">
            <summary>
            Get the maximum cost
            </summary>
            <returns>Maximum cost</returns>
        </member>
        <member name="M:api.InterfaceSubstitutionCost.getMinCost">
            <summary>
            Get the minimum cost
            </summary>
            <returns>Minimum cost</returns>
        </member>
        <member name="M:api.AbstractSubstitutionCost.getShortDescriptionString">
            <summary>
            Short Descritption
            </summary>
            <returns>Short Description</returns>
        </member>
        <member name="M:api.AbstractSubstitutionCost.getCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Returns the cost
            </summary>
            <param name="s">Param1</param>
            <param name="i">Param2</param>
            <param name="s1">Param3</param>
            <param name="j">Param4</param>
            <returns>Cost</returns>
        </member>
        <member name="M:api.AbstractSubstitutionCost.getMaxCost">
            <summary>
            Get the maximum cost
            </summary>
            <returns>Maximum cost</returns>
        </member>
        <member name="M:api.AbstractSubstitutionCost.getMinCost">
            <summary>
            Get the minimum cost
            </summary>
            <returns>Minimum cost</returns>
        </member>
        <member name="T:TvLibrary.Teletext.PageEventHandler">
            <summary>
            delegate which is called when a teletext page has been received,modified or deleted
            </summary>
            <param name="pageNumber">pagenumber (100-899)</param>
            <param name="subPageNumber">subpagenumber (0-79)</param>
        </member>
        <member name="T:TvLibrary.Teletext.ITeletext">
            <summary>
            teletext decoder interface
            </summary>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.GetTeletextChannelName">
            <summary>
            returns the channel name found in packet 8/30
            </summary>
            <returns>string containing the channel name</returns>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.ClearTeletextChannelName">
            <summary>
            clears the teletext channel name
            </summary>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.SetPageSize(System.Int32,System.Int32)">
            <summary>
            sets the width/height of the bitmap generated by GetPage()
            </summary>
            <param name="renderWidth">width in pixels</param>
            <param name="renderHeight">height in pixels</param>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.GetPage(System.Int32,System.Int32)">
            <summary>
            Gets the teletext page and renders it to a Bitmap
            </summary>
            <param name="page">pagenumber (0x100-0x899)</param>
            <param name="subpage">subpagenumber (0x0-0x79)</param>
            <returns>bitmap (or null if page is not found)</returns>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.GetRawPage(System.Int32,System.Int32)">
            <summary>
            Gets the raw teletext page.
            </summary>
            <param name="page">pagenumber (0x100-0x899)</param>
            <param name="subpage">subpagenumber (0x0-0x79)</param>
            <returns>raw teletext page (or null if page is not found)</returns>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.NumberOfSubpages(System.Int32)">
            <summary>
            returns the total number of subpages for a pagnumber
            </summary>
            <param name="currentPageNumber">pagenumber 0x100-0x899</param>
            <returns>number of subpages for this pagenumber</returns>
        </member>
        <member name="M:TvLibrary.Teletext.ITeletext.RotationTime(System.Int32)">
            <summary>
            returns the rotation time for the page.
            </summary>
            <param name="currentPageNumber">The current page number.</param>
            <returns>timespan contain the rotation time</returns>
        </member>
        <member name="E:TvLibrary.Teletext.ITeletext.OnPageUpdated">
            <summary>
            event which gets fired when the current selected pagenumber is updated
            </summary>
        </member>
        <member name="E:TvLibrary.Teletext.ITeletext.OnPageAdded">
            <summary>
            event which gets fired when the current selected pagenumber is added
            </summary>
        </member>
        <member name="E:TvLibrary.Teletext.ITeletext.OnPageDeleted">
            <summary>
            event which gets fired when the current selected pagenumber is removed
            </summary>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.PageRed">
            <summary>
            returns the pagenumber for the red button
            </summary>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.PageGreen">
            <summary>
            returns the pagenumber for the green button
            </summary>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.PageYellow">
            <summary>
            returns the pagenumber for the yellow button
            </summary>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.PageBlue">
            <summary>
            returns the pagenumber for the blue button
            </summary>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.PageSelectText">
            <summary>
            Gets the page select text.
            </summary>
            <value>The page select text.</value>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.PercentageOfMaximumHeight">
            <summary>
            Gets/Sets  the percentage of the maximum height for the font size
            </summary>
            <value>Percentage of the maximum height of font size.</value>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.HiddenMode">
            <summary>
            turns on/off the conceal (hidden) mode
            </summary>
        </member>
        <member name="P:TvLibrary.Teletext.ITeletext.TransparentMode">
            <summary>
            turns on/off transparent mode. In transparent mode the
            teletext page is rendered on transparent background
            </summary>
        </member>
        <member name="T:TvLibrary.ScanParameters">
            <summary>
            class which holds all parameters needed during scanning for channels
            </summary>
        </member>
        <member name="P:TvLibrary.ScanParameters.MinimumFiles">
            <summary>
            Gets or sets the minimium number of timeshifting files.
            </summary>
            <value>The minimium files.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.MaximumFiles">
            <summary>
            Gets or sets the maximum number of timeshifting files.
            </summary>
            <value>The maximum files.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.MaximumFileSize">
            <summary>
            Gets or sets the maximum filesize for each timeshifting file.
            </summary>
            <value>The maximum filesize.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.UseDefaultLnbFrequencies">
            <summary>
            Gets or sets the use default LNB frequencies.
            </summary>
            <value>The use default LNB frequencies.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.LnbLowFrequency">
            <summary>
            Gets or sets the LNB low frequency.
            </summary>
            <value>The LNB low frequency.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.LnbSwitchFrequency">
            <summary>
            Gets or sets the LNB switch frequency.
            </summary>
            <value>The LNB switch frequency.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.LnbHighFrequency">
            <summary>
            Gets or sets the LNB high frequency.
            </summary>
            <value>The LNB high frequency.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.TimeOutPAT">
            <summary>
            Gets or sets the time out PAT.
            </summary>
            <value>The time out PAT.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.TimeOutCAT">
            <summary>
            Gets or sets the time out CAT.
            </summary>
            <value>The time out CAT.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.TimeOutPMT">
            <summary>
            Gets or sets the time out PMT.
            </summary>
            <value>The time out PMT.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.TimeOutTune">
            <summary>
            Gets or sets the time out tune.
            </summary>
            <value>The time out tune.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.TimeOutSDT">
            <summary>
            Gets or sets the time out SDT.
            </summary>
            <value>The time out SDT.</value>
        </member>
        <member name="P:TvLibrary.ScanParameters.TimeOutAnalog">
            <summary>
            Gets or sets the time out Analog scanning.
            </summary>
            <value>The time out Analog scanning.</value>
        </member>
        <member name="T:TvLibrary.Streaming.RtspClient">
             <summary>
            class holding the details about a single rtsp streaming client
             </summary>
        </member>
        <member name="M:TvLibrary.Streaming.RtspClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Streaming.RtspClient"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Streaming.RtspClient.#ctor(System.Boolean,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Streaming.RtspClient"/> class.
            </summary>
            <param name="isActive">if set to <c>true</c> [is active].</param>
            <param name="ipadress">The ipadress.</param>
            <param name="streamName">Name of the stream.</param>
            <param name="started">The time the client connected.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:TvLibrary.Streaming.RtspClient.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:TvLibrary.Streaming.RtspClient.DateTimeStarted">
            <summary>
            Gets the date and time this client has connected.
            </summary>
            <value>The date time started.</value>
        </member>
        <member name="P:TvLibrary.Streaming.RtspClient.IsActive">
            <summary>
            Gets a value indicating whether user is is active.
            </summary>
            <value><c>true</c> if this user is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TvLibrary.Streaming.RtspClient.IpAdress">
            <summary>
            Gets the ip adress.
            </summary>
            <value>The ip adress.</value>
        </member>
        <member name="P:TvLibrary.Streaming.RtspClient.StreamName">
            <summary>
            Gets the name of the stream.
            </summary>
            <value>The name of the stream.</value>
        </member>
        <member name="T:TvLibrary.Interfaces.IChannelLinkageCallback">
            <summary>
            callback interface for the ChannelLinkageScanner
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IChannelLinkageCallback.OnLinkageReceived">
            <summary>
            Called when channel linkages are received.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Interfaces.BaseChannelLinkageScanner">
            <summary>
            Base class used for channel linkage grabbing
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.BaseChannelLinkageScanner.OnLinkageReceived">
            <summary>
            Gets called when linkage infos have been received
            Should be overriden by the class
            </summary>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Interfaces.DiSEqCDirection">
            <summary>
            DisEqC directions
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.DiSEqCDirection.West">
            <summary>
            move west
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.DiSEqCDirection.East">
            <summary>
            move east
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.DiSEqCDirection.Up">
            <summary>
            move Up
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.DiSEqCDirection.Down">
            <summary>
            move down
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.IDiSEqCMotor">
            <summary>
            interface for controlling DiSEqC motors
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.StopMotor">
            <summary>
            Stops the motor.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.Reset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.SetEastLimit">
            <summary>
            Sets the east limit.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.SetWestLimit">
            <summary>
            Sets the west limit.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.DriveMotor(TvLibrary.Interfaces.DiSEqCDirection,System.Byte)">
            <summary>
            Drives the motor.
            </summary>
            <param name="direction">The direction.</param>
            <param name="numberOfSeconds">the number of seconds to move.</param>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.StorePosition(System.Byte)">
            <summary>
            Stores the position.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.GotoReferencePosition">
            <summary>
            Goto's the sattelite reference position.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.GotoPosition(System.Byte)">
            <summary>
            Goto's the position.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IDiSEqCMotor.GetPosition(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the current motor position.
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IDiSEqCMotor.ForceLimits">
            <summary>
            Enable/disables the west/east limits.
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.ITvSubChannel">
            <summary>
            Sub Channel interface in TsWriter
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITvSubChannel.StartTimeShifting(System.String)">
            <summary>
            Starts timeshifting. Note card has to be tuned first
            </summary>
            <param name="fileName">filename used for the timeshiftbuffer</param>
            <returns>true if succeeded else false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITvSubChannel.StopTimeShifting">
            <summary>
            Stops timeshifting
            </summary>
            <returns>true if succeeded else false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITvSubChannel.StartRecording(System.String)">
            <summary>
            Starts recording
            </summary>
            <param name="fileName">filename to which to recording should be saved</param>
            <returns>true if succeeded else false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITvSubChannel.StopRecording">
            <summary>
            Stop recording
            </summary>
            <returns>true if succeeded else false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITvSubChannel.TimeShiftGetCurrentFilePosition(System.Int64@,System.Int64@)">
            <summary>
            Returns the position in the current timeshift file and the id of the current timeshift file
            </summary>
            <param name="position">The position in the current timeshift buffer file</param>
            <param name="bufferId">The id of the current timeshift buffer file</param>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.SubChannelId">
            <summary>
            Gets the sub channel id.
            </summary>
            <value>The sub channel id.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.TimeShiftFileName">
            <summary>
            gets the current filename used for timeshifting
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.StartOfTimeShift">
            <summary>
            returns the date/time when timeshifting has been started for the card specified
            </summary>
            <returns>DateTime containg the date/time when timeshifting was started</returns>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.RecordingStarted">
            <summary>
            returns the date/time when recording has been started for the card specified
            </summary>
            <returns>DateTime containg the date/time when recording was started</returns>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.IsReceivingAudioVideo">
            <summary>
            Returns true when unscrambled audio/video is received otherwise false
            </summary>
            <returns>true of false</returns>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.RecordingFileName">
            <summary>
            gets the current filename used for recording
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.IsRecording">
            <summary>
            returns true if card is currently recording
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.IsTimeShifting">
            <summary>
            returns true if card is currently timeshifting
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.CurrentChannel">
            <summary>
            returns the IChannel to which the card is currently tuned
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.GetCurrentVideoStream">
            <summary>
            returns true if we record in transport stream mode
            false we record in program stream mode
            </summary>
            <value>true for transport stream, false for program stream.</value>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.GrabTeletext">
            <summary>
            Turn on/off teletext grabbing
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.TeletextDecoder">
            <summary>
            returns the ITeletext interface used for retrieving the teletext pages
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.HasTeletext">
            <summary>
            Property which returns true when the current channel contains teletext
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.AvailableAudioStreams">
            <summary>
            returns the list of available audio streams
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITvSubChannel.CurrentAudioStream">
            <summary>
            get/set the current selected audio stream
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality">
            <summary>
            Bean class for storing one video quality setting default settings like brightness, gamma etc.
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality._minValue">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality._maxValue">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality._steppingDelta">
            <summary>
            The stepping delta
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality._defaultValue">
            <summary>
            The default value
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality._manual">
            <summary>
            Value can be adjusted manualyy
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality._value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <param name="steppingDelta">Stepping delta</param>
            <param name="defaultValue">Default value</param>
            <param name="manual">Indicates, if the quality is adjusted manually</param>
            <param name="value">The current value</param>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.ToString">
            <summary>
            Prints the values of this video quality
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.MinValue">
            <summary>
            Gets the minimum value
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.MaxValue">
            <summary>
            Gets the maximum value
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.SteppingDelta">
            <summary>
            Gets the stepping delta
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.DefaultValue">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.IsManual">
            <summary>
            Gets if the property is adjusted manually or automatically
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.VideoQuality.Value">
            <summary>
            Gets/Sets the current value
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.Capture">
            <summary>
            Bean class for a Capture in the analog graph
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._name">
            <summary>
            Name of the capture file
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._availableVideoStandard">
            <summary>
            Bitmask of the available video standards
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._currentVideoStandard">
            <summary>
            The current video standard
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._teletextPin">
            <summary>
            Index of the teletext pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._frameRate">
            <summary>
            The current frame rate
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._imageHeight">
            <summary>
            The current image height
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._imageWidth">
            <summary>
            The current image width
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._videoProcAmpValues">
            <summary>
            Dictionary of the VideoProcAmp values
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._videoIn">
            <summary>
            Index of the video input pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._audioIn">
            <summary>
            Index of the audio input pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Capture._audioCaptureName">
            <summary>
            Name of the optional audio capture device
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Capture.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Capture.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates the instance by parsing the Capture node in the configuration file
            </summary>
            <param name="xmlNode">The TvAudio xml node</param>
            <returns>TvAudio instance</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Capture.WriteGraph(System.Xml.XmlWriter)">
            <summary>
            Writes the Capture part of the graph to the configuration
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.Name">
            <summary>
            Name of the tuner device
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.AvailableVideoStandard">
            <summary>
            Map of the available video standard
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.CurrentVideoStandard">
            <summary>
            The current video standard
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.VideoProcAmpValues">
            <summary>
            Map with the VideoProcAmp settings
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.TeletextPin">
            <summary>
            Index of the teletext pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.FrameRate">
            <summary>
            The frame rate
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.ImageHeight">
            <summary>
            The Image height
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.ImageWidth">
            <summary>
            The Image width
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.VideoIn">
            <summary>
            Index of the video in pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.AudioIn">
            <summary>
            Index of the audio in pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Capture.AudioCaptureName">
            <summary>
            Name of the audio capture device
            </summary>
        </member>
        <member name="T:TvLibrary.ChannelLinkage.LinkedChannel">
            <summary>
            class which holds all linked channels
            </summary>
        </member>
        <member name="M:TvLibrary.ChannelLinkage.LinkedChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.ChannelLinkage.LinkedChannel"/> class.
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.LinkedChannel.NetworkId">
            <summary>
            Gets/Sets the network id
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.LinkedChannel.TransportId">
            <summary>
            Gets/Sets the transport id
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.LinkedChannel.ServiceId">
            <summary>
            Gets/Sets the service id
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.LinkedChannel.Name">
            <summary>
            Gets/Sets the linked channel name
            </summary>
        </member>
        <member name="T:TvLibrary.Log.Log">
            <summary>
            An implementation of a log mechanism for the GUI library.
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log._maxLogSizeMb">
            <summary>
            The maximum size of each log file in Megabytes
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log._maxRepetitions">
            <summary>
            The maximum count of identic messages to be logged in a row
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log._logDaysToKeep">
            <summary>
            Configure after how many days the log file shall be rotated when a new line is added
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log._lastLogLines">
            <summary>
            The last log n lines to compare for repeated entries.
            </summary>
        </member>
        <member name="M:TvLibrary.Log.Log.#ctor">
            <summary>
            Private singleton constructor . Do not allow any instance of this class.
            </summary>
        </member>
        <member name="M:TvLibrary.Log.Log.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Log.Log.BackupLogFiles">
            <summary>
            Backups the log files.
            </summary>
        </member>
        <member name="M:TvLibrary.Log.Log.Write(System.Exception)">
            <summary>
            Writes the specified exception to the log file
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.SafeString(System.String)">
            <summary>
            Replaces a password inside the string by stars
            </summary>
            <param name="Logtext">String to replace</param>
            <returns>String without password</returns>
        </member>
        <member name="M:TvLibrary.Log.Log.Write(System.String,System.Object[])">
            <summary>
            Write a string to the logfile.
            </summary>
            <param name="format">The format of the string.</param>
            <param name="arg">An array containing the actual data of the string.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.WriteThreadId(System.String,System.Object[])">
            <summary>
            Write a string to the logfile.
            </summary>
            <param name="format">The format of the string.</param>
            <param name="arg">An array containing the actual data of the string.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.Error(System.String,System.Object[])">
            <summary>
            Logs the message to the error file
            </summary>
            <param name="format">The format.</param>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.Info(System.String,System.Object[])">
            <summary>
            Logs the message to the info file
            </summary>
            <param name="format">The format.</param>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.Debug(System.String,System.Object[])">
            <summary>
            Logs the message to the debug file
            </summary>
            <param name="format">The format.</param>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.Epg(System.String,System.Object[])">
            <summary>
            Logs the message to the epg file
            </summary>
            <param name="format">The format.</param>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.WriteFile(System.String,System.Object[])">
            <summary>
            Logs the message to the info file
            </summary>
            <param name="format">The format.</param>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:TvLibrary.Log.Log.GetPathName">
            <summary>
             Returns the path the Application data location
            </summary>
            <returns>Application data path of TvServer</returns>
        </member>
        <member name="M:TvLibrary.Log.Log.CreateBlankFile(System.String)">
            <summary>
            Since Windows caches API calls to the FileSystem a simple FileInfo.CreationTime will be wrong when replacing files (even after refresh).
            Therefore we set it manually.
            </summary>
            <param name="aFileName"></param>
        </member>
        <member name="M:TvLibrary.Log.Log.RotateLogs">
            <summary>
            Deletes .bak file, moves .log to .bak for every LogType
            </summary>
        </member>
        <member name="M:TvLibrary.Log.Log.IsRepetition(System.IComparable{System.String})">
            <summary>
            Compares the cache's last log entries to check whether we have repeating lines that should not be logged
            </summary>
            <param name="aLogLine">A new log line</param>
            <returns>True if the cache only contains the exact lines as given by parameter</returns>
        </member>
        <member name="M:TvLibrary.Log.Log.CheckLogPrepared(System.String)">
            <summary>
            Does pre-logging tasks - like check for rotation, oversize, etc
            </summary>
            <param name="aLogFileName">The file to be checked</param>
            <returns>False if logging must not go on</returns>
        </member>
        <member name="M:TvLibrary.Log.Log.WriteToFile(TvLibrary.Log.Log.LogType,System.String,System.Object[])">
            <summary>
            Writes the file.
            </summary>
            <param name="logType">the type of logging.</param>
            <param name="format">The format.</param>
            <param name="arg">The arg.</param>
        </member>
        <member name="F:TvLibrary.Log.Log.LogType.Debug">
            <summary>
            Debug logging
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log.LogType.Info">
            <summary>
            normal logging
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log.LogType.Error">
            <summary>
            error logging
            </summary>
        </member>
        <member name="F:TvLibrary.Log.Log.LogType.Epg">
            <summary>
            epg logging
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.IEpgCallback">
            <summary>
            callback interface for the EPG
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IEpgCallback.OnEpgReceived">
            <summary>
            Called when epg is received.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Interfaces.BaseEpgGrabber">
            <summary>
            Base class used for dvb epg-grabbing
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.BaseEpgGrabber.OnEpgCancelled">
            <summary>
            Gets called when epg has been cancelled
            Should be overriden by the class
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.BaseEpgGrabber.OnEpgReceived">
            <summary>
            Gets called when epg has been received
            Should be overriden by the class
            </summary>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Interfaces.ITVEPG">
            <summary>
            interface for dvb epg grabbing
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVEPG.GrabEpg(TvLibrary.Interfaces.BaseEpgGrabber)">
            <summary>
            Starts the EPG grabber.
            When the epg has been received the OnEpgReceived event will be fired
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVEPG.Epg">
            <summary>
            returns a list of all epg data for each channel found.
            </summary>
            <value>The epg.</value>
        </member>
        <member name="T:TvLibrary.Interfaces.IEpgEvents">
            <summary>
            interface for EPG events
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IEpgEvents.OnImportEpgPrograms(TvLibrary.Epg.EpgChannel)">
            <summary>
            This method will be called by the EPG grabber.
            </summary>
        </member>
        <member name="T:TvLibrary.Epg.Languages">
            <summary>
            Class which holds all dvb epg languages
            </summary>
        </member>
        <member name="M:TvLibrary.Epg.Languages.GetLanguages">
            <summary>
            Gets the languages.
            </summary>
            <returns>list of all languages</returns>
        </member>
        <member name="M:TvLibrary.Epg.Languages.GetLanguageCodes">
            <summary>
            Gets the language codes.
            </summary>
            <returns>list of all language codes</returns>
        </member>
        <member name="M:TvLibrary.Epg.Languages.GetLanguageFromCode(System.String)">
            <summary>
            Gets the language from a language code.
            </summary>
            <param name="code">The code.</param>
            <returns>language</returns>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.Teletext">
            <summary>
            Bean class for a Teletext in the analog graph
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Teletext._name">
            <summary>
            Name of the teletext device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Teletext._category">
            <summary>
            GUID of the category of the teletext device
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Teletext.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates the instance by parsing the Teletext node in the configuration file
            </summary>
            <param name="xmlNode">The Teletext xml node</param>
            <returns>Teletext instance</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Teletext.WriteGraph(System.Xml.XmlWriter)">
            <summary>
            Writes the Teletext part of the graph to the configuration
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Teletext.Name">
            <summary>
            Name of the tuner device
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Teletext.Category">
            <summary>
            Category of the filter
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.RadioMode">
            <summary>
            Enumeration of all possible radio modes of a tuner device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.RadioMode.None">
            <summary>
            No radio support
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.RadioMode.FM">
            <summary>
            Tuner supports FM radio
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.RadioMode.AM">
            <summary>
            Tuner supports AM radio
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.Tuner">
            <summary>
            Bean class for a tuner in the analog graph
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Tuner._name">
            <summary>
            Name of the tuner device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Tuner._videoPin">
            <summary>
            Index of the video output pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Tuner._audioPin">
            <summary>
            Index of the audio output pin
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Tuner._radioMode">
            <summary>
            The supported radio mode
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Tuner.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates the instance by parsing the Tuner node in the configuration file
            </summary>
            <param name="xmlNode">The Tuner xml node</param>
            <returns>Tuner instance</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Tuner.WriteGraph(System.Xml.XmlWriter)">
            <summary>
            Writes the tuner part of the graph to the configuration
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Tuner.Name">
            <summary>
            Name of the tuner device
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Tuner.VideoPin">
            <summary>
            Index of the video pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Tuner.AudioPin">
            <summary>
            Index of the audio pin
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Tuner.RadioMode">
            <summary>
            Flags of the supported radio modes
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE">
            <summary>
            used by the IVideoEncoder interface getvalue(ENCAPIPARAM_BITRATE_MODE)
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE.Undefined">
            <summary>
             Undefined Bitrate mode
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE.ConstantBitRate">
            <summary>
            Constant bit rate mode
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage">
            <summary>
            Variable bit rate mode
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak">
            <summary>
            Variable peak bit rate mode
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE.NotSet">
            <summary>
            Bit rate mode not set
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.QualityType">
            <summary>
            QualityType's for setting the desired quality
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.Default">
            <summary>default quality</summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.Custom">
            <summary>custom quality setting, defined in SetupTv</summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.Portable">
            <summary>portable quality setting for those recordings that dont need to be close to perfect</summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.Low">
            <summary>low quality setting for those recordings that dont need to be close to perfect</summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.Medium">
            <summary>medium quality but still quite a bit less diskspace needed than high</summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.High">
            <summary>high quality setting will create larger files then the other options</summary>
        </member>
        <member name="F:TvLibrary.Interfaces.QualityType.NotSet">
            <summary>undefined quality</summary>
        </member>
        <member name="T:TvLibrary.Interfaces.IQuality">
            <summary>
            interface for quality control of a card
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IQuality.SupportsBitRateModes">
            <summary>
            Indicates if bit rate modes are supported
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.IQuality.SupportsPeakBitRateMode">
            <summary>
            Indicates if peak bit rate mode is supported
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.IQuality.SupportsBitRate">
            <summary>
            Indicates if bit rate control is supported
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.IQuality.StartPlayback">
            <summary>
            Called when playback starts
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IQuality.StartRecord">
            <summary>
            Called when record starts
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.IQuality.SetConfiguration(TvLibrary.Implementations.Analog.Configuration)">
            <summary>
            Sets the new configuration object
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IQuality.QualityType">
            <summary>
            Gets/Sets the quality bit type (only the bit rate)
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IQuality.BitRateMode">
            <summary>
            Gets/Sets the bit rate mode. Works only if this is supported
            </summary>
        </member>
        <member name="T:TvLibrary.Epg.EpgLanguageText">
            <summary>
            class which holds the title, description and genre for all epg languages received
            </summary>
        </member>
        <member name="M:TvLibrary.Epg.EpgLanguageText.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Epg.EpgLanguageText"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="genre">The genre.</param>
            <param name="starRating">The star rating</param>
            <param name="classification">The classification</param>
            <param name="parentalRating">The parental rating.</param>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.Genre">
            <summary>
            Gets or sets the genre.
            </summary>
            <value>The genre.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.StarRating">
            <summary>
            Gets or sets the star rating.
            </summary>
            <value>The star rating.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.Classification">
            <summary>
            Gets or sets the classification.
            </summary>
            <value>The classification.</value>
        </member>
        <member name="P:TvLibrary.Epg.EpgLanguageText.ParentalRating">
            <summary>
            Gets or sets the parental rating.
            </summary>
            <value>The parental rating.</value>
        </member>
        <member name="T:TvLibrary.Country">
            <summary>
            Class which holds the details about a country like the 
            short country id, the full name of the country and the iso code for the country
            </summary>
        </member>
        <member name="M:TvLibrary.Country.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Country"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Country.#ctor(System.Int32,System.String,System.String,DirectShowLib.AnalogVideoStandard)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Country"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="country">The country.</param>
            <param name="code">The code.</param>
            <param name="standard">The AnalogVideoStandard.</param>
        </member>
        <member name="M:TvLibrary.Country.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Country"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="country">The country.</param>
            <param name="code">The code.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:TvLibrary.Country.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:TvLibrary.Country.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:TvLibrary.Country.Id">
            <summary>
            get/sets  the country id
            </summary>
        </member>
        <member name="P:TvLibrary.Country.Name">
            <summary>
            gets/sets the country name
            </summary>
        </member>
        <member name="P:TvLibrary.Country.Code">
            <summary>
            gets/sets the country code
            </summary>
        </member>
        <member name="P:TvLibrary.Country.VideoStandard">
            <summary>
             Gets/Sets the analog video standard
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.CardType">
            <summary>
            Types of cards
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.Analog">
            <summary>
            analog card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.DvbS">
            <summary>
            DVB-S card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.DvbT">
            <summary>
            DVB-T card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.DvbC">
            <summary>
            DVB-C card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.Atsc">
            <summary>
            ATSC card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.RadioWebStream">
            <summary>
            RadioWebStream card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.DvbIP">
            <summary>
            IPTV card
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.CardType.Unknown">
            <summary>
            Unknown card
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.GlobalServiceProvider">
            <summary>
            The global service provider
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.GlobalServiceProvider.Instance">
            <summary>
            returns the instance of the global ServiceProvider
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.DVBTTuning">
            <summary>
            Tuning part of DVB-T required for scanning
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBTTuning.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            CTOR
            </summary>
            <param name="p_Frequency">Frequency</param>
            <param name="p_BandWidth">BandWidth</param>
            <param name="p_Offset">Offset</param>
        </member>
        <member name="F:TvLibrary.Channels.DVBTTuning.Frequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DVBTTuning.BandWidth">
            <summary>
            BandWidth
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DVBTTuning.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBTTuning.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:TvLibrary.Channels.DVBTChannel">
            <summary>
            class holding all tuning details for DVBT
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBTChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.DVBTChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBTChannel.#ctor(TvLibrary.Channels.DVBTTuning)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.DVBTChannel"/> class.
            </summary>
            <param name="tuning">Tuning detail</param>
        </member>
        <member name="M:TvLibrary.Channels.DVBTChannel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBTChannel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBTChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBTChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Channels.DVBTChannel.TuningInfo">
            <summary>
            returns basic tuning info for current channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBTChannel.Offset">
            <summary>
            gets/sets the bandwidth for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBTChannel.BandWidth">
            <summary>
            gets/sets the bandwidth for this channel
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.RadioWebStreamChannel">
            <summary>
            class holding all tuning details for radio webstream channels
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.RadioWebStreamChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Implementations.RadioWebStreamChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.RadioWebStreamChannel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.RadioWebStreamChannel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.RadioWebStreamChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.RadioWebStreamChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Implementations.RadioWebStreamChannel.Country">
            <summary>
            gets/sets the country
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.RadioWebStreamChannel.Name">
            <summary>
            gets/sets the channel name
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.RadioWebStreamChannel.Url">
            <summary>
            gets/sets the url
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.RadioWebStreamChannel.IsRadio">
            <summary>
            boolean indicating if this is a radio channel
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.RadioWebStreamChannel.IsTv">
            <summary>
            boolean indicating if this is a tv channel
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.TvAudioVariant">
            <summary>
            Enumeration for all possible variants of TvAudio devices
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudioVariant.Normal">
            <summary>
            Standard TvAudio device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudioVariant.TvTunerConnection">
            <summary>
            The tuner device is only connected to the Crossbar
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudioVariant.TvTuner">
            <summary>
            The tuner device is also the TvAudio device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudioVariant.Unavailable">
            <summary>
            No TvAudio device is available
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.TvAudio">
            <summary>
            Bean class for a TvAudio in the analog graph
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudio._mode">
            <summary>
            The current TvAudio variant of the found filter
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudio._name">
            <summary>
            The name of the TvAudio device
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.TvAudio._audioModes">
            <summary>
            The bitmask of the supported audio mode
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.TvAudio.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.TvAudio.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates the instance by parsing the TvAudio node in the configuration file
            </summary>
            <param name="xmlNode">The TvAudio xml node</param>
            <returns>TvAudio instance</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.TvAudio.WriteGraph(System.Xml.XmlWriter)">
            <summary>
            Writes the TvAudio part of the graph to the configuration
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.TvAudio.Mode">
            <summary>
            Mode of the TvAudio device
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.TvAudio.Name">
            <summary>
            Name of the tuner device
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.TvAudio.AudioModes">
            <summary>
            Flags of the supported radio modes
            </summary>
        </member>
        <member name="T:similaritymetrics.costfunctions.SubCost01">
            <summary>
            </summary>
        </member>
        <member name="M:similaritymetrics.costfunctions.SubCost01.getShortDescriptionString">
            <summary>
            Short descritption
            </summary>
            <returns>Short descritption</returns>
        </member>
        <member name="M:similaritymetrics.costfunctions.SubCost01.getCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
             Costs
            </summary>
            <param name="str1"></param>
            <param name="string1Index"></param>
            <param name="str2"></param>
            <param name="string2Index"></param>
            <returns>Costs</returns>
        </member>
        <member name="M:similaritymetrics.costfunctions.SubCost01.getMaxCost">
            <summary>
             Maximum cost
            </summary>
            <returns>Maximum Cost 1.0</returns>
        </member>
        <member name="M:similaritymetrics.costfunctions.SubCost01.getMinCost">
            <summary>
             Minimum cost
            </summary>
            <returns>Minimum cost 0.0</returns>
        </member>
        <member name="T:TvLibrary.Interfaces.ITVScanning">
            <summary>
            Interface for scanning new channels
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVScanning.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVScanning.Reset">
            <summary>
            resets the scanner
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVScanning.Scan(TvLibrary.Interfaces.IChannel,TvLibrary.ScanParameters)">
            <summary>
            Tunes to the channel specified and will start scanning for any channel
            </summary>
            <param name="channel">channel to tune to</param>
            <param name="settings">ScanParameters to use while tuning</param>
            <returns>list of channels found</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ITVScanning.ScanNIT(TvLibrary.Interfaces.IChannel,TvLibrary.ScanParameters)">
            <summary>
            Tunes to channels based on the list the multiplexes that make up a DVB network.
            This information is obtained from the DVB NIT (Network Information Table)
            </summary>
            <param name="channel">channel to tune to</param>
            <param name="settings">ScanParameters to use while tuning</param>
            <returns></returns>
        </member>
        <member name="P:TvLibrary.Interfaces.ITVScanning.TvCard">
            <summary>
            returns the tv card used 
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.DVB.AnalogAudioStream">
            <summary>
            class describing an analog audio stream
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.IAudioStream">
            <summary>
            interface which describes a single audio stream
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IAudioStream.Language">
            <summary>
            gets/sets the Audio language
            </summary>
        </member>
        <member name="P:TvLibrary.Interfaces.IAudioStream.StreamType">
            <summary>
            gets/sets the audio stream type
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.AnalogAudioStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Implementations.DVB.AnalogAudioStream"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.AnalogAudioStream.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.AnalogAudioStream.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.AnalogAudioStream.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:TvLibrary.Implementations.DVB.AnalogAudioStream.Language">
            <summary>
            gets/sets  Audio language
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.DVB.AnalogAudioStream.StreamType">
            <summary>
            gets/sets the audio stream type
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.DVB.AnalogAudioStream.AudioMode">
            <summary>
            Gets or sets the audio mode.
            </summary>
            <value>The audio mode.</value>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.GraphComponents.Graph">
            <summary>
            An analog graph
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Graph._tuner">
            <summary>
            The Tuner component
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Graph._tvAudio">
            <summary>
            The TvAudio component
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Graph._crossbar">
            <summary>
            The Crossbar component
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Graph._capture">
            <summary>
            The Capture component
            </summary>
        </member>
        <member name="F:TvLibrary.Implementations.Analog.GraphComponents.Graph._teletext">
            <summary>
            The Teletext component
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Graph.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates the Graph instance which represents an analog graph
            </summary>
            <param name="xmlNode">The graph xml node</param>
            <returns>Graph instance</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.GraphComponents.Graph.WriteGraph(System.Xml.XmlWriter)">
            <summary>
            Writes the graph to the configuration
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Graph.Tuner">
            <summary>
            The tuner part of the graph
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Graph.TvAudio">
            <summary>
            The TvAudio part of the graph
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Graph.Crossbar">
            <summary>
            The Crossbar part of the graph
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Graph.Capture">
            <summary>
            The Capture part of the graph
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.GraphComponents.Graph.Teletext">
            <summary>
            The Teletext part of the graph
            </summary>
        </member>
        <member name="T:TvLibrary.ChannelLinkage.PortalChannel">
            <summary>
            class which holds all linked channels
            </summary>
        </member>
        <member name="M:TvLibrary.ChannelLinkage.PortalChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.ChannelLinkage.LinkedChannel"/> class.
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.PortalChannel.NetworkId">
            <summary>
            Gets/Sets the network id
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.PortalChannel.TransportId">
            <summary>
            Gets/Sets the transport id
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.PortalChannel.ServiceId">
            <summary>
            Gets/Sets the service id
            </summary>
        </member>
        <member name="P:TvLibrary.ChannelLinkage.PortalChannel.LinkedChannels">
            <summary>
            Gets/Sets the list of linked channels
            </summary>
        </member>
        <member name="T:TvLibrary.CountryCollection">
            <summary>
            class which holds a collection of all countries
            </summary>
        </member>
        <member name="M:TvLibrary.CountryCollection.#ctor">
            <summary>
             Default constructor
            </summary>
        </member>
        <member name="M:TvLibrary.CountryCollection.GetTunerCountry(System.String)">
            <summary>
            Returns a country specified by name
            </summary>
            <param name="countryName">name of country</param>
            <returns><see cref="T:TvLibrary.Country"/> object or null if country is not found</returns>
        </member>
        <member name="M:TvLibrary.CountryCollection.GetTunerCountryFromID(System.Int32)">
            <summary>
            Returns a country specified by id
            </summary>
            <param name="countryId">id of country</param>
            <returns><see cref="T:TvLibrary.Country"/>  object or null if country is not found</returns>
        </member>
        <member name="M:TvLibrary.CountryCollection.GetTunerCountryFromCode(System.String)">
            <summary>
            Returns a country specified by id
            </summary>
            <param name="code">country code</param>
            <returns><see cref="T:TvLibrary.Country"/>  object or null if country is not found</returns>
        </member>
        <member name="P:TvLibrary.CountryCollection.Countries">
            <summary>
            Returns an array of all countries
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.DVB.DVBAudioStream">
            <summary>
            class which holds the audio stream details for a DVB channel
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.DVBAudioStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Implementations.DVB.DVBAudioStream"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.DVBAudioStream.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.DVBAudioStream.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Implementations.DVB.DVBAudioStream.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:TvLibrary.Implementations.DVB.DVBAudioStream.Language">
            <summary>
            gets/sets  Audio language
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.DVB.DVBAudioStream.StreamType">
            <summary>
            gets/sets the audio stream type
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.DVB.DVBAudioStream.Pid">
            <summary>
            gets/sets the audio pid for this stream
            </summary>
        </member>
        <member name="T:TvLibrary.Implementations.Analog.Configuration">
            <summary>
            Configuration object for the web server
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.Configuration.#ctor">
            <summary>
            Simple constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.Configuration.readConfiguration(System.Int32,System.String,System.String)">
            <summary>
            Loads the configuration from a xml file
            </summary>
            <param name="name">Name of the card</param>
            <param name="cardId">Unique id of the card</param>
            <param name="devicePath">The device path of the card</param>
            <returns>Configuration object</returns>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.Configuration.writeConfiguration(TvLibrary.Implementations.Analog.Configuration)">
            <summary>
            Saves the configuration object in a xml file
            </summary>
            <param name="configuration">Configuration object to be saved</param>
        </member>
        <member name="M:TvLibrary.Implementations.Analog.Configuration.GetFileName(System.String,System.Int32)">
            <summary>
            Generates the file and pathname of the configuration file
            </summary>
            <param name="name">Name of the card</param>
            <param name="cardId">Unique id of the card</param>
            <returns>Complete filename of the configuration file</returns>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.CustomQualityValue">
            <summary>
             Gets/Sets the custom quality value
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.CustomPeakQualityValue">
            <summary>
            Gets/Sets the custom peak quality value
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.PlaybackQualityType">
            <summary>
            Gets/Sets the playback quality type
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.RecordQualityType">
            <summary>
            Gets/Sets the record quality type
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.PlaybackQualityMode">
            <summary>
            Gets/Sets the playback quality mode
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.RecordQualityMode">
            <summary>
            Gets/Sets the record quality mode
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.Name">
            <summary>
            Gets/Sets the card name
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.DevicePath">
            <summary>
            Gets/Sets the device path
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.CardId">
            <summary>
            Gets/Sets the card id
            </summary>
        </member>
        <member name="P:TvLibrary.Implementations.Analog.Configuration.Graph">
            <summary>
            Gets/Sets the graph
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.AudioStreamType">
            <summary>
            Audio stream types
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.Mpeg1">
            <summary>
            mpeg 1 audio
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.Mpeg2">
            <summary>
            mpeg 2 audio
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.AC3">
            <summary>
            ac3 audio
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.AAC">
            <summary>
            aac audio
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.LATMAAC">
            <summary>
            latm aac audio
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.EAC3">
            <summary>
            ac3 audio
            </summary>
        </member>
        <member name="F:TvLibrary.Interfaces.AudioStreamType.Unknown">
            <summary>
            unknown audio
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.DVBIPChannel">
            <summary>
            class holding all tuning details for DVBIP
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBIPChannel.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBIPChannel.Equals(System.Object)">
            <summary>
            Comparision of channels
            </summary>
            <param name="obj">other channel to compare</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBIPChannel.GetHashCode">
            <summary>
            returns hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="P:TvLibrary.Channels.DVBIPChannel.Url">
            <summary>
            URL of channel
            </summary>
        </member>
        <member name="T:similaritymetrics.Levenstein">
            <summary>
             Levenstein metric
            </summary>
        </member>
        <member name="T:api.AbstractStringMetric">
            <summary>
             Abstradct String MEtric
            </summary>
        </member>
        <member name="M:api.AbstractStringMetric.getSimilarityTimingActual(System.String,System.String)">
            <summary>
            Return Similarity Timing Actual
            </summary>
            <param name="string1">Param1</param>
            <param name="string2">Param2</param>
            <returns>Similarity Timing</returns>
        </member>
        <member name="M:api.AbstractStringMetric.batchCompareSet(System.String[],System.String)">
            <summary>
            Batch compare of string
            </summary>
            <param name="set_Renamed">Strings to compare</param>
            <param name="comparator">Comparator</param>
            <returns>Results</returns>
        </member>
        <member name="M:api.AbstractStringMetric.batchCompareSets(System.String[],System.String[])">
            <summary>
            Batch compare of two string sets
            </summary>
            <param name="firstSet">Fist set</param>
            <param name="secondSet">Second set</param>
            <returns>Results</returns>
        </member>
        <member name="M:api.AbstractStringMetric.getSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            Return the similarty timing estimation
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>similarty timing estimation</returns>
        </member>
        <member name="M:api.AbstractStringMetric.getSimilarity(System.String,System.String)">
            <summary>
            Return the similarity
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>Similarity</returns>
        </member>
        <member name="P:api.AbstractStringMetric.ShortDescriptionString">
            <summary>
            Short Descritpion
            </summary>
        </member>
        <member name="P:api.AbstractStringMetric.LongDescriptionString">
            <summary>
            Long Description
            </summary>
        </member>
        <member name="M:similaritymetrics.Levenstein.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="M:similaritymetrics.Levenstein.getSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            Return the similarty timing estimation
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>similarty timing estimation</returns>
        </member>
        <member name="M:similaritymetrics.Levenstein.getSimilarity(System.String,System.String)">
            <summary>
            Return the similarity
            </summary>
            <param name="s">Param1</param>
            <param name="s1">Param2</param>
            <returns>Similarity</returns>
        </member>
        <member name="P:similaritymetrics.Levenstein.ShortDescriptionString">
            <summary>
            Gets the short description
            </summary>
        </member>
        <member name="P:similaritymetrics.Levenstein.LongDescriptionString">
            <summary>
            Gets the long description
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.BandType">
            <summary>
            enum describing the DVBS band
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.Universal">
            <summary>
            Ku-Linear - LOF1 9750, LOF2 10600, SW 11700
            Universal LNB - common in Europe
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.Circular">
            <summary>
            Ku-Circular - LOF1 10750
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.CBand">
            <summary>
            C-Band - LOF1 5150
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaBandStackedDpKuHi">
            <summary>
            North American Bandstacked
            DishPro Ku-Linear Hi(DBS) - LOF1 11250, LOF2 14350
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaBandStackedDpKuLo">
            <summary>
            North American Bandstacked
            DishPro Ku-Linear Lo(FSS) - LOF1 10750, LOF2 13850
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaBandStackedKuHi">
            <summary>
            North American Bandstacked
            Ku-Linear Hi(DBS) - LOF1 11250, LOF2 10675
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaBandStackedKuLo">
            <summary>
            North American Bandstacked
            Ku-Linear Lo(FSS) - LOF1 10750, LOF2 10175
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaBandStackedC">
            <summary>
            North American Bandstacked
            C-Band LOF1 5150, LOF2 5750
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaLegacy">
            <summary>
            North American Legacy
            LOF1 11250
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaCustom1">
            <summary>
            North American Custom1
            LOF1 11250, LOF2 11250, SW 12700
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.BandType.NaCustom2">
            <summary>
            North American Custom2
            LOF1 11250, LOF2 11250, SW 12200
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.BandTypeConverter">
            <summary>
            Class for LNB setup and LNB number
            Helps determin the DVB-S band type and subsequent LNB frequencies
            Also determins if hi band tuning is required
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.BandTypeConverter.GetAntennaNr(TvLibrary.Channels.DVBSChannel)">
            <summary>
            Gets the Antenna Number (or LNB number)
            </summary>
            <param name="channel">holds tuning details for DVB-S</param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Channels.BandTypeConverter.IsHiBand(TvLibrary.Channels.DVBSChannel,TvLibrary.ScanParameters)">
            <summary>
            Determins if the tuning paramter is HiBand and if so involke the 22Khz switch.
            </summary>
            <param name="channel">tuning details for specific channel / frequency</param>
            <param name="parameters">holds the parameters needed for tuning channel </param>
            <returns></returns>
        </member>
        <member name="M:TvLibrary.Channels.BandTypeConverter.GetDefaultLnbSetup(TvLibrary.ScanParameters,TvLibrary.Channels.BandType,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the default LNB Setup depending on the type chosen.
            </summary>
            <param name="parameters">Satelliet scan parameters</param>
            <param name="band">LNB type i.e. Uiniversal</param>
            <param name="lof1">LNB low frequency</param>
            <param name="lof2">LNB high frequency</param>
            <param name="sw">LNB switch frequency</param>
        </member>
        <member name="T:TvLibrary.Channels.DisEqcType">
            <summary>
            enum describing the different DisEqc type
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.None">
            <summary>
            diseqc not used
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.SimpleA">
            <summary>
            Simple A
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.SimpleB">
            <summary>
            Simple B
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.Level1AA">
            <summary>
            Level 1 A/A
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.Level1AB">
            <summary>
            Level 1 A/B
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.Level1BA">
            <summary>
            Level 1 B/A
            </summary>
        </member>
        <member name="F:TvLibrary.Channels.DisEqcType.Level1BB">
            <summary>
            Level 1 B/B
            </summary>
        </member>
        <member name="T:TvLibrary.Channels.DVBSChannel">
            <summary>
            class holding all tuning details for DVBS
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBSChannel.#ctor(TvLibrary.Channels.DVBSChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.DVBSChannel"/> class.
            </summary>
            <param name="chan">The chan.</param>
        </member>
        <member name="M:TvLibrary.Channels.DVBSChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvLibrary.Channels.DVBSChannel"/> class.
            </summary>
        </member>
        <member name="M:TvLibrary.Channels.DVBSChannel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBSChannel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBSChannel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:TvLibrary.Channels.DVBSChannel.IsDifferentTransponder(TvLibrary.Interfaces.IChannel)">
            <summary>
            Checks if the given channel and this instance are on the different transponder
            </summary>
            <param name="channel">Channel to check</param>
            <returns>true, if the channels are on the same transponder</returns>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.InnerFecRate">
            <summary>
            gets/sets the InnerFEC Rate for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.ModulationType">
            <summary>
            gets/sets the Modulation type for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.SatelliteIndex">
            <summary>
            gets/sets the Satellite Index for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.BandType">
            <summary>
            gets/sets the BandType for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.Polarisation">
            <summary>
            gets/sets the Polarisation for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.SymbolRate">
            <summary>
            gets/sets the SymbolRate for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.SwitchingFrequency">
            <summary>
            gets/sets the LNB Switch frequency for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.DisEqc">
            <summary>
            gets/sets the DiSEqC setting for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.Pilot">
            <summary>
            gets/sets the Pilot setting for this channel
            </summary>
        </member>
        <member name="P:TvLibrary.Channels.DVBSChannel.Rolloff">
            <summary>
            gets/sets the Roll-Off setting for this channel
            </summary>
        </member>
        <member name="T:TvLibrary.Interfaces.ServiceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.IsRegistered``1">
            <summary>
            This method returns true if the service is registered
            </summary>
            <typeparam name="T">Service type</typeparam>
            <returns>true if service is registered</returns>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.Add``1(System.Object)">
            <summary>
            Register a new service to the service provider
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="service">service</param>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.Get``1">
            <summary>
            returns the service
            </summary>
            <typeparam name="T">service type</typeparam>
            <returns>service itself</returns>
            <remarks>if service is not registered an exception is thrown</remarks>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.TryGet``1">
            <summary>
            returns the service
            </summary>
            <typeparam name="T">service type</typeparam>
            <returns>service itself</returns>
            <remarks>if service is not registered a suitable default is returned</remarks>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.Remove``1">
            <summary>
            removes a service from the service provider
            </summary>
            <typeparam name="T">Service type</typeparam>
        </member>
        <member name="M:TvLibrary.Interfaces.ServiceProvider.Replace``1(System.Object)">
            <summary>
            Replaces an instance of the service 
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="service">new instance of the service</param>
        </member>
    </members>
</doc>
