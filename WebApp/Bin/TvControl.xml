<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TvControl</name>
    </assembly>
    <members>
        <member name="T:TvControl.RemoteControl">
            <summary>
            Class which holds the connection with the master tv-server
            </summary>
        </member>
        <member name="M:TvControl.RemoteControl.RegisterChannel">
            <summary>
            Registers a remoting channel for allowing callback from server to client
            </summary>
        </member>
        <member name="M:TvControl.RemoteControl.RegisterCiMenuCallbacks(TvLibrary.Interfaces.CiMenuCallbackSink)">
            <summary>
            Registers Ci Menu Callbackhandler in TvPlugin, connects to a server side event
            </summary>
        </member>
        <member name="M:TvControl.RemoteControl.UnRegisterCiMenuCallbacks(TvLibrary.Interfaces.CiMenuCallbackSink)">
            <summary>
            Unregisters Ci Menu Callbackhandler in TvPlugin when it's no longer required
            </summary>
        </member>
        <member name="M:TvControl.RemoteControl.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:TvControl.RemoteControl.HostName">
            <summary>
            Gets or sets the name the hostname of the master tv-server.
            </summary>
            <value>The name of the host.</value>
        </member>
        <member name="P:TvControl.RemoteControl.Instance">
            <summary>
            returns an the <see cref="T:TvControl.IController"/> interface to the tv server
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:TvControl.RemoteControl.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected with the tv server
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TvControl.VirtualCard">
            <summary>
            Virtual Card class
            This class provides methods and properties which a client can use
            The class will handle the communication and control with the
            tv service backend
            </summary>
        </member>
        <member name="M:TvControl.VirtualCard.#ctor(TvControl.User,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.VirtualCard"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="server">The server.</param>
            <param name="recordingFormat">The recording format.</param>
        </member>
        <member name="M:TvControl.VirtualCard.#ctor(TvControl.User,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.VirtualCard"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="server">The server.</param>
        </member>
        <member name="M:TvControl.VirtualCard.#ctor(TvControl.User)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.VirtualCard"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:TvControl.VirtualCard.GetCurrentVideoStream(TvControl.User)">
            <summary>
            Gets the current video stream format.
            </summary>
            <value>The available audio streams.</value>
        </member>
        <member name="M:TvControl.VirtualCard.GetTeletextPage(System.Int32,System.Int32)">
            <summary>
            Gets a raw teletext page.
            </summary>
            <param name="pageNumber">The page number. (0x100-0x899)</param>
            <param name="subPageNumber">The sub page number.(0x0-0x79)</param>
            <returns>byte[] array containing the raw teletext page or null if page is not found</returns>
        </member>
        <member name="M:TvControl.VirtualCard.Scan(TvLibrary.Interfaces.IChannel)">
            <summary>
            scans current transponder for channels.
            </summary>
            <returns>list of all channels found</returns>
        </member>
        <member name="M:TvControl.VirtualCard.StopTimeShifting">
            <summary>
            Stops the time shifting.
            </summary>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.StopRecording">
            <summary>
            Stops recording.
            </summary>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.StartRecording(System.String@,System.Boolean,System.Int64)">
            <summary>
            Starts recording.
            </summary>
            <param name="fileName">Name of the recording file.</param>
            <param name="contentRecording">not used</param>
            <param name="startTime">not used</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.IsLocked(TvControl.User@)">
            <summary>
            Determines whether the card is locked.
            </summary>
            <param name="user">The user which has locked the card</param>
            <returns>
            	<c>true</c> if the card is locked; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.VirtualCard.SubPageCount(System.Int32)">
            <summary>
            Gets the number of subpages for a teletext page.
            </summary>
            <param name="pageNumber">The page number (0x100-0x899)</param>
            <returns>number of teletext subpages for the pagenumber</returns>
        </member>
        <member name="M:TvControl.VirtualCard.GetTeletextRedPageNumber">
            <summary>
            Gets the teletext pagenumber for the red button
            </summary>
            <returns>Teletext pagenumber for the red button</returns>
        </member>
        <member name="M:TvControl.VirtualCard.GetTeletextGreenPageNumber">
            <summary>
            Gets the teletext pagenumber for the green button
            </summary>
            <returns>Teletext pagenumber for the green button</returns>
        </member>
        <member name="M:TvControl.VirtualCard.GetTeletextYellowPageNumber">
            <summary>
            Gets the teletext pagenumber for the yellow button
            </summary>
            <returns>Teletext pagenumber for the yellow button</returns>
        </member>
        <member name="M:TvControl.VirtualCard.GetTeletextBluePageNumber">
            <summary>
            Gets the teletext pagenumber for the blue button
            </summary>
            <returns>Teletext pagenumber for the blue button</returns>
        </member>
        <member name="M:TvControl.VirtualCard.TeletextRotation(System.Int32)">
            <summary>f
            Returns the rotation time for a specific teletext page
            </summary>
            <param name="pageNumber">The pagenumber (0x100-0x899)</param>
            <returns>timespan containing the rotation time</returns>
        </member>
        <member name="M:TvControl.VirtualCard.GetChannelState(System.Int32,TvControl.User)">
            <summary>
            Finds out whether a channel is currently tuneable or not
            </summary>
            <param name="idChannel">the channel id</param>
            <param name="user">User</param>
            <returns>an enum indicating tunable/timeshifting/recording</returns>
        </member>
        <member name="M:TvControl.VirtualCard.IsOwner">
            <summary>
            Indicates, if the user is the owner of the card
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SupportsQualityControl">
            <summary>
            Indicates, if the card supports quality control
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SupportsBitRate">
            <summary>
            Indicates, if the card supports bit rates
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SupportsBitRateModes">
            <summary>
            Indicates, if the card supports bit rate modes 
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SupportsPeakBitRateMode">
            <summary>
            Indicates, if the card supports bit rate peak mode
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.CiMenuSupported">
            <summary>
            Indicates, if the card supports CI Menu
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.EnterCiMenu">
            <summary>
            Enters the CI Menu for current card
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SelectCiMenu(System.Byte)">
            <summary>
            Selects a ci menu entry
            </summary>
            <param name="Choice">Choice (1 based), 0 for "back"</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.VirtualCard.CloseMenu">
            <summary>
            Closes the CI Menu for current card
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SendMenuAnswer(System.Boolean,System.String)">
            <summary>
            Sends an answer to CAM after a request
            </summary>
            <param name="Cancel">cancel request</param>
            <param name="Answer">answer string</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.VirtualCard.SetCiMenuHandler(TvLibrary.Interfaces.ICiMenuCallbacks)">
            <summary>
            Sets a callback handler
            </summary>
            <param name="CallbackHandler"></param>
            <returns></returns>
        </member>
        <member name="P:TvControl.VirtualCard.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:TvControl.VirtualCard.Id">
            <summary>
            returns the card id of this virtual card
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.Enabled">
            <summary>
            returns if the card is enabled;
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.RemoteServer">
            <summary>
            gets the ip adress of the tvservice
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingFormat">
            <summary>
             Gets/Set the recording format
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingFolder">
            <summary>
            gets/sets the recording folder for the card
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.TimeshiftFolder">
            <summary>
            gets/sets the timeshifting folder for the card
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.Type">
            <summary>
            Gets the type of card (analog,dvbc,dvbs,dvbt,atsc)
            </summary>
            <value>cardtype</value>
        </member>
        <member name="P:TvControl.VirtualCard.Name">
            <summary>
            Gets the name 
            </summary>
            <returns>name of card</returns>
        </member>
        <member name="P:TvControl.VirtualCard.Device">
            <summary>
            Gets the device path 
            </summary>
            <returns>devicePath of card</returns>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingFileName">
            <summary>
            Returns the current filename used for recording
            </summary>
            <returns>filename of the recording or null when not recording</returns>
        </member>
        <member name="P:TvControl.VirtualCard.AudioStream">
            <summary>
            gets/sets the current audio stream 
            </summary>
            <returns>current audio stream</returns>
        </member>
        <member name="P:TvControl.VirtualCard.AvailableAudioStreams">
            <summary>
            Gets the available audio streams.
            </summary>
            <value>The available audio streams.</value>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingScheduleId">
            <summary>
            returns which schedule is currently being recorded
            </summary>
            <returns>id of Schedule or -1 if  card not recording</returns>
        </member>
        <member name="P:TvControl.VirtualCard.RTSPUrl">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream 
            </summary>
            <returns>URL containing the RTSP adress on which the card transmits its stream</returns>
        </member>
        <member name="P:TvControl.VirtualCard.GrabTeletext">
            <summary>
            turn on/off teletext grabbing
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.HasTeletext">
            <summary>
            Returns if the current channel has teletext or not
            </summary>
            <returns>yes if channel has teletext otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsGrabbingEpg">
            <summary>
            Returns if we arecurrently grabbing the epg or not
            </summary>
            <returns>true when card is grabbing the epg  otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsRecording">
            <summary>
            Returns if card is currently recording or not
            </summary>
            <returns>true when card is recording otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.GetTimeshiftStoppedReason">
            <summary>
            Returns the reason as to why TV timeshifting stopped
            </summary>		
        </member>
        <member name="P:TvControl.VirtualCard.IsScanning">
            <summary>
            Returns if card is currently scanning or not
            </summary>
            <returns>true when card is scanning otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsScrambled">
            <summary>
            Returns whether the current channel is scrambled or not.
            </summary>
            <returns>yes if channel is scrambled and CI/CAM cannot decode it, otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsTimeShifting">
            <summary>
            Returns if card is currently timeshifting or not
            </summary>
            <returns>true when card is timeshifting otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.MinChannel">
            <summary>
            returns the minium channel number
            </summary>
            <returns>minium channel number</returns>
        </member>
        <member name="P:TvControl.VirtualCard.MaxChannel">
            <summary>
            returns the maximum channel number
            </summary>
            <returns>maximum channel number</returns>
        </member>
        <member name="P:TvControl.VirtualCard.TimeShiftFileName">
            <summary>
            Returns the current filename used for timeshifting
            </summary>
            <returns>timeshifting filename null when not timeshifting</returns>
        </member>
        <member name="P:TvControl.VirtualCard.TimeShiftStarted">
            <summary>
            returns the date/time when timeshifting has been started 
            </summary>
            <returns>DateTime containg the date/time when timeshifting was started</returns>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingStarted">
            <summary>
            returns the date/time when recording has been started 
            </summary>
            <returns>DateTime containg the date/time when timeshifting was started</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsTunerLocked">
            <summary>
            Returns if the tuner is locked onto a signal or not
            </summary>
            <returns>true if tuner is locked otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.ChannelName">
            <summary>
            Gets the name of the tv/radio channel to which we are tuned
            </summary>
            <returns>channel name</returns>
        </member>
        <member name="P:TvControl.VirtualCard.Channel">
            <summary>
            Gets the of the tv/radio channel to which we are tuned
            </summary>
            <returns>channel name</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IdChannel">
            <summary>
            returns the database channel
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:TvControl.VirtualCard.SignalLevel">
            <summary>
            Returns the signal level 
            </summary>
            <returns>signal level (0-100)</returns>
        </member>
        <member name="P:TvControl.VirtualCard.SignalQuality">
            <summary>
            Returns the signal quality 
            </summary>
            <returns>signal quality (0-100)</returns>
        </member>
        <member name="P:TvControl.VirtualCard.QualityType">
            <summary>
            Gets/Sts the quality type
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.BitRateMode">
            <summary>
            Gets/Sts the bitrate mode
            </summary>
        </member>
        <member name="T:TvControl.TvServer">
            <summary>
            Class which connects to the remote tv-server
            </summary>
        </member>
        <member name="M:TvControl.TvServer.GetRtspUrlForFile(System.String)">
            <summary>
            Gets the RTSP URL for a file located at the tvserver.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.TvServer.DeleteRecording(System.Int32)">
            <summary>
            Deletes the recording at the tvserver
            </summary>
            <param name="idRecording">The id of the recording.</param>
        </member>
        <member name="M:TvControl.TvServer.IsRecordingValid(System.Int32)">
            <summary>
            Checks if the files of a recording still exist
            </summary>
            <param name="idRecording">The id of the recording</param>
        </member>
        <member name="M:TvControl.TvServer.GetUserForCard(System.Int32)">
            <summary>
            Gets the user for card.
            </summary>
            <param name="cardId">The card id.</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.TvServer.CardByIndex(TvControl.User,System.Int32)">
            <summary>
            returns a virtual card for the specified index
            which can be used to control the card
            </summary>
            <param name="user">The user.</param>
            <param name="index">index of card</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.TvServer.IsRecording(System.String,TvControl.VirtualCard@)">
            <summary>
            Determines whether the specified channel name is recording.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="card">The vcard.</param>
            <returns>
            	<c>true</c> if the specified channel name is recording; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.TvServer.IsAnyCardRecording">
            <summary>
            Returns if any card is recording
            </summary>
            <returns>true if any card is recording, otherwise false</returns>
        </member>
        <member name="M:TvControl.TvServer.IsAnyCardRecordingOrTimeshifting(TvControl.User,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Determines if any card is currently busy recording or timeshifting
            </summary>
            <param name="userTS">timeshifting user</param>
            <param name="isUserTS">true if the specified user is timeshifting</param>
            <param name="isAnyUserTS">true if any user (except for the userTS) is timeshifting</param>
            <param name="isRec">true if recording</param>
            <returns>
            	<c>true</c> if a card is recording or timeshifting; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.TvServer.IsAnyCardIdle">
            <summary>
            Determines if any card is not locked by a user
            </summary>
            <returns>true if any card is idle, otherwise false</returns>
        </member>
        <member name="M:TvControl.TvServer.TimeShiftingWouldUseCard(TvControl.User@,System.Int32)">
            <summary>
            Query what card would be used for timeshifting on any given channel
            </summary>
            <param name="user">user credentials.</param>
            <param name="idChannel">The id channel.</param>    
            <returns>
            returns card id which would be used when doing the actual timeshifting.
            </returns>
        </member>
        <member name="M:TvControl.TvServer.StartTimeShifting(TvControl.User@,System.Int32,TvControl.VirtualCard@)">
            <summary>
            Start timeshifting on a specific channel
            </summary>
            <param name="user">The user.</param>
            <param name="idChannel">id of the channel</param>
            <param name="card">returns on which card timeshifting is started</param>
            <returns>
            TvResult indicating whether method succeeded
            </returns>
        </member>
        <member name="M:TvControl.TvServer.StartTimeShifting(TvControl.User@,System.Int32,TvControl.VirtualCard@,System.Boolean)">
            <summary>
            Start timeshifting on a specific channel
            </summary>
            <param name="user">The user.</param>
            <param name="idChannel">id of the channel</param>
            <param name="card">returns on which card timeshifting is started</param>
            <param name="forceCardId">Indicated, if the card should be forced</param>
            <returns>
            TvResult indicating whether method succeeded
            </returns>
        </member>
        <member name="M:TvControl.TvServer.IsRecordingSchedule(System.Int32,TvControl.VirtualCard@)">
            <summary>
            Checks if the schedule specified is currently being recorded and ifso
            returns on which card
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <param name="card">returns card is recording the channel</param>
            <returns>true if a card is recording the schedule, otherwise false</returns>
        </member>
        <member name="M:TvControl.TvServer.StopRecordingSchedule(System.Int32)">
            <summary>
            Stops recording the Schedule specified
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.TvServer.OnNewSchedule">
            <summary>
            This method should be called by a client to indicate that
            there is a new or modified Schedule in the database
            </summary>
        </member>
        <member name="M:TvControl.TvServer.IsTimeToRecord(System.DateTime)">
            <summary>
            This method should be called by a client to check
            if there is any upcoming recording
            </summary>
        </member>
        <member name="M:TvControl.TvServer.IsTimeToRecord(System.DateTime,System.Int32)">
            <summary>
            This method should be called by a client to check 
            if a specific recording is due. 
            </summary>
        </member>
        <member name="M:TvControl.TvServer.OnNewSchedule(System.EventArgs)">
            <summary>
            This method should be called by a client to indicate that
            there is a new or modified Schedule in the database
            </summary>
        </member>
        <member name="M:TvControl.TvServer.GetDatabaseConnectionString(System.String@,System.String@)">
            <summary>
            Returns the SQl connection string to the database
            </summary>
        </member>
        <member name="M:TvControl.TvServer.GetStreamUrlForFileName(System.Int32)">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream 
            </summary>
            <returns>URL containing the RTSP adress on which the card transmits its stream</returns>
        </member>
        <member name="M:TvControl.TvServer.GetAllChannelStatesCached(TvControl.User)">
            <summary>
            Fetches all channel states for a specific user (cached - faster)
            </summary>    
            <param name="user"></param>      
        </member>
        <member name="M:TvControl.TvServer.GetAllChannelStatesForGroup(System.Int32,TvControl.User)">
            <summary>
            Fetches all channel states for a specific group
            </summary>
            <param name="idGroup"></param>    
            <param name="user"></param>        
        </member>
        <member name="M:TvControl.TvServer.GetChannelState(System.Int32,TvControl.User)">
            <summary>
            Finds out whether a channel is currently tuneable or not
            </summary>
            <param name="idChannel">the channel id</param>
            <param name="user">User</param>
            <returns>an enum indicating tunable/timeshifting/recording</returns>
        </member>
        <member name="M:TvControl.TvServer.GetAllRecordingChannels(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Fetches all channels with backbuffer
            </summary>
            <param name="currentRecChannels"></param>
            <param name="currentTSChannels"></param>
            <param name="currentUnavailChannels"></param>
            <param name="currentAvailChannels"></param>
        </member>
        <member name="P:TvControl.TvServer.Count">
            <summary>
            Returns the number of cards found
            </summary>
        </member>
        <member name="P:TvControl.TvServer.EpgGrabberEnabled">
            <summary>
            Enable or disable the epg-grabber
            </summary>
        </member>
        <member name="T:TvControl.TvStoppedReason">
            <summary>
            enum describing the possible result codes for the tv engine when TV suddenly stops
            </summary>
        </member>
        <member name="F:TvControl.TvStoppedReason.UnknownReason">
            <summary>
            Timeshifting stopped because of an unknown reason.
            </summary>
        </member>
        <member name="F:TvControl.TvStoppedReason.RecordingStarted">
            <summary>
            Timeshifting stopped because a recording started which needed the card.
            </summary>
        </member>
        <member name="F:TvControl.TvStoppedReason.KickedByAdmin">
            <summary>
            Timeshifting stopped because client was kicked by server admin.
            </summary>
        </member>
        <member name="F:TvControl.TvStoppedReason.HeartBeatTimeOut">
            <summary>
            Timeshifting stopped because client heartbeat timed out.
            </summary>
        </member>
        <member name="F:TvControl.TvStoppedReason.OwnerChangedTS">
            <summary>
            Timeshifting stopped because the owner of the same transponder has decided to change transponder.
            </summary>
        </member>
        <member name="T:TvControl.TvResult">
            <summary>
            enum describing the possible result codes for the tv engine
            </summary>
        </member>
        <member name="F:TvControl.TvResult.Succeeded">
            <summary>
            Operation succeeded
            </summary>
        </member>
        <member name="F:TvControl.TvResult.AllCardsBusy">
            <summary>
            Operation failed since all cards are busy and no free card could be found
            </summary>
        </member>
        <member name="F:TvControl.TvResult.ChannelIsScrambled">
            <summary>
            Operation failed since channel is encrypted
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NoVideoAudioDetected">
            <summary>
            Opetation failed since no audio/video was detected after tuning
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NoSignalDetected">
            <summary>
            Operation failed since no signal was detected
            </summary>
        </member>
        <member name="F:TvControl.TvResult.UnknownError">
            <summary>
            Operation failed due to an unknown error
            </summary>
        </member>
        <member name="F:TvControl.TvResult.UnableToStartGraph">
            <summary>
            Operation failed since the graph could not be build or started
            </summary>
        </member>
        <member name="F:TvControl.TvResult.UnknownChannel">
            <summary>
            Operation failed since the channel is unknown
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NoTuningDetails">
            <summary>
            Operation failed since the there is no tuning information for the channel
            </summary>
        </member>
        <member name="F:TvControl.TvResult.ChannelNotMappedToAnyCard">
            <summary>
            Operation failed since the channel is not mapped to any card
            </summary>
        </member>
        <member name="F:TvControl.TvResult.CardIsDisabled">
            <summary>
            Operation failed since the card is disabled
            </summary>
        </member>
        <member name="F:TvControl.TvResult.ConnectionToSlaveFailed">
            <summary>
            Operation failed since we are unable to connect to the slave server
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NotTheOwner">
            <summary>
            Operation failed since we are not the owner of the card
            </summary>
        </member>
        <member name="F:TvControl.TvResult.GraphBuildingFailed">
            <summary>
            Operation failed since we are unable to build the graph
            </summary>
        </member>
        <member name="F:TvControl.TvResult.SWEncoderMissing">
            <summary>
            Operation failed since we can't find a suitable software encoder
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NoFreeDiskSpace">
            <summary>
            Operation failed since there is no free disk space
            </summary>
        </member>
        <member name="T:TvControl.ChannelState">
            <summary>
            current availability of a specific channel
            </summary>
        </member>
        <member name="F:TvControl.ChannelState.nottunable">
            <summary>
            the channel cannot be tuned right now - maybe all cards are busy
            </summary>
        </member>
        <member name="F:TvControl.ChannelState.tunable">
            <summary>
            the channel can be zapped
            </summary>
        </member>
        <member name="F:TvControl.ChannelState.timeshifting">
            <summary>
            this channel is currently timeshifted by one card
            </summary>
        </member>
        <member name="F:TvControl.ChannelState.recording">
            <summary>
            this channel is currently being recorded
            </summary>
        </member>
        <member name="T:TvControl.IController">
            <summary>
            interface class describing all methods available
            to remote-control the TVService
            </summary>
        </member>
        <member name="M:TvControl.IController.InitConditionalAccess(System.Int32)">
            <summary>
            Initialized Conditional Access handler
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.IController.CardId(System.Int32)">
            <summary>
            Gets the card Id for a card
            </summary>
            <param name="cardIndex">Index of the card.</param>
            <value>id of card</value>
        </member>
        <member name="M:TvControl.IController.Enabled(System.Int32)">
            <summary>
            returns if the card is enabled or disabled
            </summary>
            <param name="cardId">id of the card.</param>
            <value>true if enabled, otherwise false</value>
        </member>
        <member name="M:TvControl.IController.Type(System.Int32)">
            <summary>
            Gets the type of card (analog,dvbc,dvbs,dvbt,atsc)
            </summary>
            <param name="cardId">id of the card.</param>
            <value>cardtype</value>
        </member>
        <member name="M:TvControl.IController.CardName(System.Int32)">
            <summary>
            Gets the name for a card.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>name of card</returns>
        </member>
        <member name="M:TvControl.IController.CanTune(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            Method to check if card can tune to the channel specified
            </summary>
            <returns>true if card can tune to the channel otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.CardPresent(System.Int32)">
            <summary>
            Method to check if card is currently present and detected
            </summary>
            <returns>true if card is present otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.CardRemove(System.Int32)">
            <summary>
            Method to remove a non-present card from the local card collection
            </summary>
            <returns>true if card is present otherwise false</returns>		
        </member>
        <member name="M:TvControl.IController.CardDevice(System.Int32)">
            <summary>
            Gets the device path for a card.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>devicePath of card</returns>
        </member>
        <member name="M:TvControl.IController.TunerLocked(System.Int32)">
            <summary>
            Returns if the tuner is locked onto a signal or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when tuner is locked to a signal otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.SignalQuality(System.Int32)">
            <summary>
            Returns the signal quality for a card
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>signal quality (0-100)</returns>
        </member>
        <member name="M:TvControl.IController.SignalLevel(System.Int32)">
            <summary>
            Returns the signal level for a card.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>signal level (0-100)</returns>
        </member>
        <member name="M:TvControl.IController.UpdateSignalSate(System.Int32)">
            <summary>
            Updates the signal state for a card.
            </summary>
            <param name="cardId">id of the card.</param>
        </member>
        <member name="M:TvControl.IController.IsScanning(System.Int32)">
            <summary>
            Returns if the card is currently scanning for channels or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is scanning otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsGrabbingEpg(System.Int32)">
            <summary>
            Returns if the card is currently grabbing the epg or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is grabbing the epg  otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.Scan(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            scans current transponder for channels.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="channel">contains tuningdetails for the transponder.</param>
            <returns>list of all channels found</returns>
        </member>
        <member name="M:TvControl.IController.ScanNIT(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            scans nit the current transponder for channels
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="channel">contains tuningdetails for the transponder.</param>
            <returns>list of all channels found</returns>
        </member>
        <member name="M:TvControl.IController.MinChannel(System.Int32)">
            <summary>
            returns the minium channel numbers for analog cards
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>minium channel number</returns>
        </member>
        <member name="M:TvControl.IController.MaxChannel(System.Int32)">
            <summary>
            returns the maximum channel numbers for analog cards
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>maximum channel number</returns>
        </member>
        <member name="M:TvControl.IController.GetRecordingSchedule(System.Int32,System.Int32)">
            <summary>
            returns which schedule the card specified is currently recording
            </summary>
            <param name="cardId">card id</param>
            <param name="channelId">channel id</param>
            <returns>id of Schedule or -1 if  card not recording</returns>
        </member>
        <member name="M:TvControl.IController.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:TvControl.IController.GetRecordingUrl(System.Int32)">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream for recording 
            </summary>
            <param name="idRecording">id of recording</param>
            <returns>URL containing the RTSP adress on which the recording can be found</returns>
        </member>
        <member name="M:TvControl.IController.DeleteRecording(System.Int32)">
            <summary>
            Deletes the recording from database and disk
            </summary>
            <param name="idRecording">The id recording.</param>
        </member>
        <member name="M:TvControl.IController.IsRecordingValid(System.Int32)">
            <summary>
            Checks if the files of a recording still exist
            </summary>
            <param name="idRecording">The id of the recording</param>
        </member>
        <member name="M:TvControl.IController.GetUrlForFile(System.String)">
            <summary>
            Gets the rtsp URL for file located on the tvserver.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>rtsp url</returns>
        </member>
        <member name="M:TvControl.IController.IsRecordingSchedule(System.Int32,TvControl.VirtualCard@)">
            <summary>
            Checks if the schedule specified is currently being recorded and ifso
            returns on which card
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <param name="card">returns card is recording the channel</param>
            <returns>true if a card is recording the schedule, otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsRecording(System.String,TvControl.VirtualCard@)">
            <summary>
            Determines whether the specified channel name is recording.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="card">The vcard.</param>
            <returns>
            	<c>true</c> if the specified channel name is recording; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.IsAnyCardRecording">
            <summary>
            Determines if any card is currently busy recording
            </summary>
            <returns>
            	<c>true</c> if a card is recording; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.IsAnyCardRecordingOrTimeshifting(TvControl.User,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Determines if any card is currently busy recording or timeshifting
            </summary>
            <param name="userTS">timeshifting user</param>
            <param name="isUserTS">true if the specified user is timeshifting</param>
            <param name="isAnyUserTS">true if any user (except for the userTS) is timeshifting</param>
            <param name="isRec">true if recording</param>
            <returns>
            	<c>true</c> if a card is recording or timeshifting; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.IsAnyCardIdle">
            <summary>
            Determines if any card is not locked by a user
            </summary>
            <returns>
            	<c>true</c> if a card is idle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.StopRecordingSchedule(System.Int32)">
            <summary>
            Stops recording the Schedule specified
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.IController.OnNewSchedule">
            <summary>
            This method should be called by a client to indicate that
            there is a new or modified Schedule in the database
            </summary>
        </member>
        <member name="M:TvControl.IController.OnNewSchedule(System.EventArgs)">
            <summary>
            This method should be called by a client to indicate that
            there is a new or modified Schedule in the database
            </summary>
        </member>
        <member name="M:TvControl.IController.GetDatabaseConnectionString(System.String@,System.String@)">
            <summary>
            Returns the SQl connection string to the database
            </summary>
        </member>
        <member name="M:TvControl.IController.SetDatabaseConnectionString(System.String,System.String)">
            <summary>
            Sets the database connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:TvControl.IController.Restart">
            <summary>
            Restarts the service.
            </summary>
        </member>
        <member name="M:TvControl.IController.IsCardInUse(System.Int32,TvControl.User@)">
            <summary>
            Determines whether the card is in use
            </summary>
            <param name="cardId">The card id.</param>
            <param name="user">The user who uses the card.</param>
            <returns>
            	<c>true</c> if card is in use; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.GetAllChannelStatesCached(TvControl.User)">
            <summary>
            Fetches all channel states for a specific user (cached - faster)
            </summary>    
            <param name="user"></param>      
        </member>
        <member name="M:TvControl.IController.GetAllChannelStatesForGroup(System.Int32,TvControl.User)">
            <summary>
            Fetches all channel states for a specific group
            </summary>
            <param name="idGroup"></param>    
            <param name="user"></param>        
        </member>
        <member name="M:TvControl.IController.GetChannelState(System.Int32,TvControl.User)">
            <summary>
            Finds out whether a channel is currently tuneable or not
            </summary>
            <param name="idChannel">The channel id</param>
            <param name="user">User</param>
            <returns>an enum indicating tunable/timeshifting/recording</returns>
        </member>
        <member name="M:TvControl.IController.GetAllRecordingChannels(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Fetches all channels with backbuffer
            </summary>
            <param name="currentRecChannels"></param>
            <param name="currentTSChannels"></param>
            <param name="currentUnavailChannels"></param>
            <param name="currentAvailChannels"></param>
        </member>
        <member name="M:TvControl.IController.DiSEqCReset(System.Int32)">
            <summary>
            Reset DiSEqC for the given card
            </summary>
            <param name="cardId">card id</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCStopMotor(System.Int32)">
            <summary>
            Stops the DiSEqC motor for the given card
            </summary>
            <param name="cardId">card id</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCSetEastLimit(System.Int32)">
            <summary>
            Sets the DiSEqC east limit for the given card
            </summary>
            <param name="cardId">card id</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCSetWestLimit(System.Int32)">
            <summary>
            Sets the DiSEqC west limit for the given card
            </summary>
            <param name="cardId">card id</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCForceLimit(System.Int32,System.Boolean)">
            <summary>
            DiSEqC force limit  for the given card
            </summary>
            <param name="cardId">card id</param>
            <param name="onoff">on/off</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCDriveMotor(System.Int32,TvLibrary.Interfaces.DiSEqCDirection,System.Byte)">
            <summary>
            Moves the DiSEqC motor for the given card
            </summary>
            <param name="cardId">card id</param>
            <param name="direction">direction</param>
            <param name="numberOfSteps">Number of steps</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCStorePosition(System.Int32,System.Byte)">
            <summary>
            Stores the current DiSEqC position for the given card
            </summary>
            <param name="cardId">card id</param>
            <param name="position">position</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCGotoReferencePosition(System.Int32)">
            <summary>
            DiSEqC move to the reference position for the given card
            </summary>
            <param name="cardId">card id</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCGotoPosition(System.Int32,System.Byte)">
            <summary>
            Go to the DiSEqC position for the given card
            </summary>
            <param name="cardId">card id</param>
            <param name="position">position</param>
        </member>
        <member name="M:TvControl.IController.DiSEqCGetPosition(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the DiSEqC position for the given card
            </summary>
            <param name="cardId">card id</param>
            <param name="satellitePosition">satellite position</param>
            <param name="stepsAzimuth">azimuth</param>
            <param name="stepsElevation">elvation</param>
        </member>
        <member name="M:TvControl.IController.GetStreamingUrl(TvControl.User)">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream for the selected card
            </summary>
            <param name="user">The user.</param>
            <returns>
            URL containing the RTSP adress on which the card transmits its stream
            </returns>
        </member>
        <member name="M:TvControl.IController.RecordingFileName(TvControl.User@)">
            <summary>
            Returns the current filename used for recording
            </summary>
            <param name="user">The user.</param>
            <returns>
            filename of the recording or null when not recording
            </returns>
        </member>
        <member name="M:TvControl.IController.CurrentChannel(TvControl.User@)">
            <summary>
            Gets the tv/radio channel on which the card is currently tuned
            </summary>
            <param name="user">The user.</param>
            <returns>IChannel</returns>
        </member>
        <member name="M:TvControl.IController.CurrentDbChannel(TvControl.User@)">
            <summary>
            returns the id of the current channel.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.IController.CurrentChannelName(TvControl.User@)">
            <summary>
            Gets the name of the tv/radio channel on which the card is currently tuned
            </summary>
            <param name="user">The user.</param>
            <returns>channel name</returns>
        </member>
        <member name="M:TvControl.IController.IsScrambled(TvControl.User@)">
            <summary>
            Returns whether the channel to which the card is tuned is
            scrambled or not.
            </summary>
            <param name="user">The user.</param>
            <returns>
            yes if channel is scrambled and CI/CAM cannot decode it, otherwise false
            </returns>
        </member>
        <member name="M:TvControl.IController.TimeShiftFileName(TvControl.User@)">
            <summary>
            Returns the current filename used for timeshifting
            </summary>
            <param name="user">The user.</param>
            <returns>
            timeshifting filename null when not timeshifting
            </returns>
        </member>
        <member name="M:TvControl.IController.TimeShiftGetCurrentFilePosition(TvControl.User@,System.Int64@,System.Int64@)">
            <summary>
            Returns the position in the current timeshift file and the id of the current timeshift file
            </summary>
            <param name="user">The user.</param>
            <param name="position">The position in the current timeshift buffer file</param>
            <param name="bufferId">The id of the current timeshift buffer file</param>
        </member>
        <member name="M:TvControl.IController.IsTimeShifting(TvControl.User@)">
            <summary>
            Returns if the card is currently timeshifting or not
            </summary>
            <param name="user">The user.</param>
            <returns>true when card is timeshifting otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsTimeToRecord(System.DateTime)">
            <summary>
            This function checks whether something should be recorded at the given time.
            </summary>
            <param name="time">the time to check for recordings.</param>
            <returns>true if any recording due to time</returns>
        </member>
        <member name="M:TvControl.IController.IsTimeToRecord(System.DateTime,System.Int32)">
            <summary>
            This function checks whether something should be recorded at the given time.
            </summary>
            <param name="time">the time to check for recordings.</param>
            <param name="scheduleId">schedule id</param>
            <returns>true if any recording due to time</returns>
        </member>
        <member name="M:TvControl.IController.IsRecording(TvControl.User@)">
            <summary>
            Returns if the card is currently recording or not
            </summary>
            <param name="user">The user.</param>
            <returns>
            true when card is recording otherwise false
            </returns>
        </member>
        <member name="M:TvControl.IController.IsGrabbingTeletext(TvControl.User)">
            <summary>
            Returns if the card is currently grabbing teletext or not
            </summary>
            <param name="user">The user.</param>
            <returns>
            true when card is grabbing teletext otherwise false
            </returns>
        </member>
        <member name="M:TvControl.IController.TeletextRotation(TvControl.User,System.Int32)">
            <summary>
            Returns the rotation time for a specific teletext page
            </summary>
            <param name="user">The user.</param>
            <param name="pageNumber">The pagenumber (0x100-0x899)</param>
            <returns>timespan containing the rotation time</returns>
        </member>
        <member name="M:TvControl.IController.HasTeletext(TvControl.User)">
            <summary>
            Returns if the channel to which the card is currently tuned
            has teletext or not
            </summary>
            <param name="user">The user.</param>
            <returns>
            yes if channel has teletext otherwise false
            </returns>
        </member>
        <member name="M:TvControl.IController.GrabTeletext(TvControl.User,System.Boolean)">
            <summary>
            turn on/off teletext grabbing for a card
            </summary>
            <param name="user">The user.</param>
            <param name="onOff">boolean indicating if teletext grabbing should be enabled or not</param>
        </member>
        <member name="M:TvControl.IController.GetTeletextPage(TvControl.User,System.Int32,System.Int32)">
            <summary>
            Gets a raw teletext page.
            </summary>
            <param name="user">The user.</param>
            <param name="pageNumber">The page number. (0x100-0x899)</param>
            <param name="subPageNumber">The sub page number.(0x0-0x79)</param>
            <returns>
            byte[] array containing the raw teletext page or null if page is not found
            </returns>
        </member>
        <member name="M:TvControl.IController.SubPageCount(TvControl.User,System.Int32)">
            <summary>
            Gets the number of subpages for a teletext page.
            </summary>
            <param name="user">The user.</param>
            <param name="pageNumber">The page number (0x100-0x899)</param>
            <returns>
            number of teletext subpages for the pagenumber
            </returns>
        </member>
        <member name="M:TvControl.IController.GetTeletextRedPageNumber(TvControl.User)">
            <summary>
            Gets the teletext pagenumber for the red button
            </summary>
            <param name="user">The user.</param>
            <returns>Teletext pagenumber for the red button</returns>
        </member>
        <member name="M:TvControl.IController.GetTeletextGreenPageNumber(TvControl.User)">
            <summary>
            Gets the teletext pagenumber for the green button
            </summary>
            <param name="user">The user.</param>
            <returns>Teletext pagenumber for the green button</returns>
        </member>
        <member name="M:TvControl.IController.GetTeletextYellowPageNumber(TvControl.User)">
            <summary>
            Gets the teletext pagenumber for the yellow button
            </summary>
            <param name="user">The user.</param>
            <returns>Teletext pagenumber for the yellow button</returns>
        </member>
        <member name="M:TvControl.IController.GetTeletextBluePageNumber(TvControl.User)">
            <summary>
            Gets the teletext pagenumber for the blue button
            </summary>
            <param name="user">The user.</param>
            <returns>Teletext pagenumber for the blue button</returns>
        </member>
        <member name="M:TvControl.IController.TimeShiftStarted(TvControl.User)">
            <summary>
            returns the date/time when timeshifting has been started for the card specified
            </summary>
            <param name="user">The user.</param>
            <returns>
            DateTime containg the date/time when timeshifting was started
            </returns>
        </member>
        <member name="M:TvControl.IController.RecordingStarted(TvControl.User)">
            <summary>
            returns the date/time when recording has been started for the card specified
            </summary>
            <param name="user">The user.</param>
            <returns>
            DateTime containg the date/time when recording was started
            </returns>
        </member>
        <member name="M:TvControl.IController.AvailableAudioStreams(TvControl.User)">
            <summary>
            returns the list of available audio streams for the card specified
            </summary>
            <param name="user">The user.</param>
            <returns>List containing all audio streams</returns>
        </member>
        <member name="M:TvControl.IController.GetCurrentAudioStream(TvControl.User)">
            <summary>
            returns the current selected audio stream for the card specified
            </summary>
            <param name="user">The user.</param>
            <returns>current audio stream</returns>
        </member>
        <member name="M:TvControl.IController.SetCurrentAudioStream(TvControl.User,TvLibrary.Interfaces.IAudioStream)">
            <summary>
            Sets the current audio stream for the card specified
            </summary>
            <param name="user">The user.</param>
            <param name="stream">audio stream</param>
        </member>
        <member name="M:TvControl.IController.GetCurrentVideoStream(TvControl.User)">
            <summary>
            returns the current video stream on the virtual card. 
            </summary>
            <param name="user">The user.</param>
            <returns>List containing all audio streams</returns>
        </member>
        <member name="M:TvControl.IController.StartTimeShifting(TvControl.User@,System.String@)">
            <summary>
            Start timeshifting.
            </summary>
            <param name="user">The user.</param>
            <param name="fileName">Name of the timeshiftfile.</param>
            <returns>
            TvResult indicating whether method succeeded
            </returns>
        </member>
        <member name="M:TvControl.IController.StopCard(TvControl.User)">
            <summary>
            Stops the card.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:TvControl.IController.TimeShiftingWouldUseCard(TvControl.User@,System.Int32)">
            <summary>
            Query what card would be used for timeshifting on any given channel
            </summary>
            <param name="user">user credentials.</param>
            <param name="idChannel">The id channel.</param>    
            <returns>
            returns card id which would be used when doing the actual timeshifting.
            </returns>
        </member>
        <member name="M:TvControl.IController.StartTimeShifting(TvControl.User@,System.Int32,TvControl.VirtualCard@,System.Boolean)">
            <summary>
            Start timeshifting on a specific channel
            </summary>
            <param name="idChannel">The id channel.</param>
            <param name="user">user credentials.</param>
            <param name="card">returns on which card timeshifting is started</param>
            <param name="forceCardId">Indicated, if the card should be forced</param>
            <returns>
            TvResult indicating whether method succeeded
            </returns>
        </member>
        <member name="M:TvControl.IController.StartTimeShifting(TvControl.User@,System.Int32,TvControl.VirtualCard@)">
            <summary>
            Start timeshifting on a specific channel
            </summary>
            <param name="idChannel">The id channel.</param>
            <param name="user">user credentials.</param>
            <param name="card">returns on which card timeshifting is started</param>
            <returns>
            TvResult indicating whether method succeeded
            </returns>
        </member>
        <member name="M:TvControl.IController.StopTimeShifting(TvControl.User@,TvControl.TvStoppedReason)">
            <summary>
            Stops the time shifting.
            </summary>
            <param name="user">user credentials.</param>
            <param name="reason">reason why timeshifting is stopped.</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.GetTvStoppedReason(TvControl.User)">
            <summary>
            Gets the reason why timeshifting stopped.
            </summary>
            <param name="user">The user.</param>		
            <returns>TvStoppedReason</returns>
        </member>
        <member name="M:TvControl.IController.StopTimeShifting(TvControl.User@)">
            <summary>
            Stops the time shifting.
            </summary>
            <param name="user">user credentials.</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.StartRecording(TvControl.User@,System.String@,System.Boolean,System.Int64)">
            <summary>
            Starts recording.
            </summary>
            <param name="user">The user.</param>
            <param name="fileName">Name of the recording file.</param>
            <param name="contentRecording">not used</param>
            <param name="startTime">not used</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.StopRecording(TvControl.User@)">
            <summary>
            Stops recording.
            </summary>
            <param name="user">The user.</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.Tune(TvControl.User@,TvLibrary.Interfaces.IChannel,System.Int32)">
            <summary>
            Tune the the specified card to the channel.
            </summary>
            <param name="user">The user.</param>
            <param name="channel">The channel.</param>
            <param name="idChannel">The id channel.</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:TvControl.IController.IsTunedToTransponder(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            Determines whether the card is currently tuned to the transponder
            </summary>
            <param name="cardId">The card id.</param>
            <param name="transponder">The transponder.</param>
            <returns>
            	<c>true</c> if card is tuned to the transponder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.GetUserForCard(System.Int32)">
            <summary>
            Gets the user for card.
            </summary>
            <param name="cardId">The card id.</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.IController.GetUsersForCard(System.Int32)">
            <summary>
            Gets the users for card.
            </summary>
            <param name="cardId">The card id.</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.IController.IsOwner(System.Int32,TvControl.User)">
            <summary>
            Determines whether the the user is the owner of the card
            </summary>
            <param name="cardId">The card id.</param>
            <param name="user">The user.</param>
            <returns>
            	<c>true</c> if the specified user is the card owner; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.IController.RemoveUserFromOtherCards(System.Int32,TvControl.User)">
            <summary>
            Removes the user from other cards then the one specified
            </summary>
            <param name="cardId">The card id.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:TvControl.IController.SupportsSubChannels(System.Int32)">
            <summary>
            Checks if the card supports sub channels
            </summary>
            <param name="cardId">card id</param>
            <returns>true, if the card supports sub channels; false otherwise</returns>
        </member>
        <member name="M:TvControl.IController.HeartBeat(TvControl.User)">
            <summary>
            Signals heartbeat to the server
            </summary>		
            <param name="user">The user.</param>
        </member>
        <member name="M:TvControl.IController.NumberOfChannelsDecrypting(System.Int32)">
            <summary>
            Gets the number of channels decrypting.
            </summary>
            <param name="cardId">The card id.</param>
            <returns></returns>
            <value>The number of channels decrypting.</value>
        </member>
        <member name="M:TvControl.IController.HasCA(System.Int32)">
            <summary>
            Does the card have a CA module.
            </summary>
            <value>The number of channels decrypting.</value>
        </member>
        <member name="M:TvControl.IController.SupportsQualityControl(System.Int32)">
            <summary>
            Indicates if bit rate modes are supported
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.IController.SupportsBitRateModes(System.Int32)">
            <summary>
            Indicates if bit rate modes are supported
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.IController.SupportsPeakBitRateMode(System.Int32)">
            <summary>
            Indicates if peak bit rate mode is supported
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.IController.SupportsBitRate(System.Int32)">
            <summary>
            Indicates if bit rate control is supported
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.IController.ReloadCardConfiguration(System.Int32)">
            <summary>
            Reloads the configuration for the given card
            </summary>
            <param name="cardId">Unique id of the card</param>
        </member>
        <member name="M:TvControl.IController.GetQualityType(System.Int32)">
            <summary>
            Gets the current quality type
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>QualityType</returns>
        </member>
        <member name="M:TvControl.IController.SetQualityType(System.Int32,TvLibrary.Interfaces.QualityType)">
            <summary>
            Sets the quality type
            </summary>
            <param name="cardId">Unique id of the card</param>
            <param name="qualityType">The new quality type</param>
        </member>
        <member name="M:TvControl.IController.GetBitRateMode(System.Int32)">
            <summary>
            Gets the current bitrate mdoe
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>QualityType</returns>
        </member>
        <member name="M:TvControl.IController.SetBitRateMode(System.Int32,TvLibrary.Interfaces.VIDEOENCODER_BITRATE_MODE)">
            <summary>
            Sets the bitrate mode
            </summary>
            <param name="cardId">Unique id of the card</param>
            <param name="bitRateMode">The new bitrate mdoe</param>
        </member>
        <member name="M:TvControl.IController.CiMenuSupported(System.Int32)">
            <summary>
            Indicates if CI Menu is supported
            </summary>
            <param name="cardId">Unique id of the card</param>
            <returns>true/false</returns>
        </member>
        <member name="M:TvControl.IController.EnterCiMenu(System.Int32)">
            <summary>
            Enters the ci menu of card
            </summary>
            <param name="cardId">card</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.IController.SelectMenu(System.Int32,System.Byte)">
            <summary>
            Selects a ci menu option
            </summary>
            <param name="cardId">card</param>
            <param name="choice">choice</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.IController.CloseMenu(System.Int32)">
            <summary>
            CloseMenu closes the menu
            </summary>
            <param name="cardId">card</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:TvControl.IController.SendMenuAnswer(System.Int32,System.Boolean,System.String)">
            <summary>
            Sends a answer to cam after a request
            </summary>
            <param name="cardId">card</param>
            <param name="Cancel">cancel request</param>
            <param name="Answer">answer string</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.IController.SetCiMenuHandler(System.Int32,TvLibrary.Interfaces.ICiMenuCallbacks)">
            <summary>
            Registers a ci menu callback handler for user interaction
            </summary>
            <param name="cardId"></param>
            <param name="CallbackHandler"></param>
            <returns></returns>
        </member>
        <member name="P:TvControl.IController.GetAssemblyVersion">
            <summary>
            Gets the assembly of tvservice.exe
            </summary>
            <value>Returns the AssemblyVersion of tvservice.exe</value>
        </member>
        <member name="P:TvControl.IController.IdServer">
            <summary>
            Gets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:TvControl.IController.Cards">
            <summary>
            Gets the total number of tv-cards installed.
            </summary>
            <value>Number which indicates the cards installed</value>
        </member>
        <member name="P:TvControl.IController.EpgGrabberEnabled">
            <summary>
            Enable or disable the epg-grabber
            </summary>
        </member>
        <member name="P:TvControl.IController.ServerIpAdresses">
            <summary>
            Returns a list of all ip adresses on the server.
            </summary>
            <value>The server ip adresses.</value>
        </member>
        <member name="P:TvControl.IController.StreamingPort">
            <summary>
            Returns the port used for RTSP streaming.
            If streaming is not initialized, returns 0.
            </summary>
            <value>The streaming port</value>
        </member>
        <member name="P:TvControl.IController.StreamingClients">
            <summary>
            Gets a list of all streaming clients.
            </summary>
            <value>The streaming clients.</value>
        </member>
        <member name="P:TvControl.IController.IsMaster">
            <summary>
            Determines whether or not this is a master controller
            </summary>
        </member>
        <member name="P:TvControl.IController.ActiveStreams">
            <summary>
            Determines the number of active streams on the server
            </summary>
        </member>
        <member name="E:TvControl.IController.OnCiMenu">
            <summary>
            Add or remove callback destinations on the client
            </summary>
        </member>
        <member name="T:TvControl.User">
            <summary>
            Class holding user credentials
            </summary>
        </member>
        <member name="M:TvControl.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.User"/> class.
            </summary>
        </member>
        <member name="M:TvControl.User.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.User"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isAdmin">if set to <c>true</c> [is admin].</param>
        </member>
        <member name="M:TvControl.User.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.User"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isAdmin">if set to <c>true</c> [is admin].</param>
            <param name="cardId">The card id.</param>
        </member>
        <member name="M:TvControl.User.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:TvControl.User.ChannelStates">
            <summary>
            Gets a list of all channel states    
            </summary>    
            <returns>dictionary containing all channel states of the channels supplied</returns>
        </member>
        <member name="P:TvControl.User.CardId">
            <summary>
            Gets or sets the card id.
            </summary>
            <value>The card id.</value>
        </member>
        <member name="P:TvControl.User.IdChannel">
            <summary>
            Gets or sets the database id channel.
            </summary>
            <value>The id channel.</value>
        </member>
        <member name="P:TvControl.User.SubChannel">
            <summary>
            Gets or sets the subchannel id.
            </summary>
            <value>The subchannel id.</value>
        </member>
        <member name="P:TvControl.User.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TvControl.User.IsAdmin">
            <summary>
            Gets or sets a value indicating whether this instance is admin.
            </summary>
            <value><c>true</c> if this instance is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TvControl.User.History">
            <summary>
            Gets or sets the history.
            </summary>
            <value>The history.</value>
        </member>
        <member name="P:TvControl.User.HeartBeat">
            <summary>
            Gets/Sets the time of the last heartbeat
            </summary>
        </member>
        <member name="P:TvControl.User.TvStoppedReason">
            <summary>
            Gets/Sets the stop reason
            </summary>
        </member>
        <member name="T:OSInfo.OSInfo">
            <summary>
            OSInfo Class
            </summary>
        </member>
        <member name="M:OSInfo.OSInfo.GetOSProductType">
            <summary>
            Returns the product type of the operating system running on this computer.
            </summary>
            <returns>A string containing the the operating system product type.</returns>
        </member>
        <member name="M:OSInfo.OSInfo.GetOSServicePack">
            <summary>
            Returns the service pack information of the operating system running on this computer.
            </summary>
            <returns>A string containing the the operating system service pack information.</returns>
        </member>
        <member name="M:OSInfo.OSInfo.GetOSNameString">
            <summary>
            Returns the name of the operating system running on this computer.
            </summary>
            <returns>A string containing the the operating system name.</returns>
        </member>
        <member name="M:OSInfo.OSInfo.GetOSName">
            <summary>
            Returns the name of the operating system running on this computer.
            </summary>
            <returns>A string containing the the operating system name.</returns>
        </member>
        <member name="M:OSInfo.OSInfo.GetOSSupported">
            <summary>
            Return a value that indicate if the OS is blocked, supported, or officially unsupported
            </summary>
            <returns>0 to block installation/usage</returns>
            <returns>1 if fully supported</returns>
            <returns>2 if not officially supported</returns>
        </member>
        <member name="P:OSInfo.OSInfo.OSVersion">
            <summary>
            Gets the full version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSMajorVersion">
            <summary>
            Gets the major version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSMinorVersion">
            <summary>
            Gets the minor version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSBuildVersion">
            <summary>
            Gets the build version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSRevisionVersion">
            <summary>
            Gets the revision version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSServicePackMajor">
            <summary>
            Gets the main version of the service pack running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSServicePackMinor">
            <summary>
            Gets the main version of the service pack running on this computer.
            </summary>
        </member>
        <member name="P:OSInfo.OSInfo.OSProductType">
            <summary>
            Gets the product type of the operating system running on this computer.
            </summary>
        </member>
        <member name="T:OSInfo.OSInfo.OSList">
            <summary>
            List of all operating systems
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.Windows2000andPrevious">
            <summary>
             Windows 95/98, NT4.0, 2000
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.WindowsXp">
            <summary>
             Windows XP x86
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.WindowsXp64">
            <summary>
             Windows XP x64
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.WindowsVista">
            <summary>
             Windows Vista
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.Windows7">
            <summary>
             Windows 7
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.Windows2003">
            <summary>
             Windows 2003 Server
            </summary>
        </member>
        <member name="F:OSInfo.OSInfo.OSList.Windows2008">
            <summary>
             Windows 2008 Server
            </summary>
        </member>
    </members>
</doc>
